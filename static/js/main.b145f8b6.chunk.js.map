{"version":3,"sources":["03-Components/Header/AuthorizedNav/AuthorizedNav.module.css","03-Components/c8-CommonForm/CommonForm.module.css","reportWebVitals.ts","00-API/api.ts","00-API/auth-api.ts","01-redux/profile-reducer.ts","01-redux/app-reducer.ts","01-redux/auth-reducer.ts","01-redux/registration-reducer.ts","01-redux/recovery-password-reducer.ts","01-redux/new-password-reducer.ts","01-redux/test-reducer.ts","00-API/packs-api.ts","01-redux/packs-reducer.ts","00-API/cards-api.ts","01-redux/cards-reducer.ts","03-Components/c5-Search/filter-reducer.ts","01-redux/store.ts","03-Components/Header/error404/Error404.tsx","03-Components/c1-SuperInputText/SuperInputText.tsx","03-Components/c3-SuperCheckbox/SuperCheckbox.tsx","03-Components/c2-SuperButton/SuperButton.tsx","02-Features/auth/login/Login.tsx","01-redux/selectors/app-selectors.ts","01-redux/selectors/auth-selector.ts","02-Features/auth/login/LoginContainer.tsx","02-Features/auth/registration/Registration.tsx","02-Features/auth/registration/RegistrationContainer.tsx","04-Assets/unnamed.jpg","02-Features/profile/Profile.tsx","02-Features/recovery-password/recoveryPassword.tsx","03-Components/c6-Modal/modal/ModalWindow.tsx","03-Components/c6-Modal/ModalForCards/ModalForDelete.tsx","03-Components/c6-Modal/ModalForCards/ModalForUpdateCard.tsx","02-Features/cards/Card/Card.tsx","03-Components/c6-Modal/ModalForCards/ModalForAddCard.tsx","02-Features/cards/Cards.tsx","02-Features/test/Test.tsx","03-Components/c8-CommonForm/CommonForm.tsx","02-Features/reset-password/ResetPassword.tsx","03-Components/c5-Search/Search.tsx","03-Components/c6-Modal/modal/ModalForAddPack.tsx","03-Components/c6-Modal/ModalForCards/ModalForUpdateCardsPack.tsx","02-Features/packs/CardPaksElement/CardPacksElement.tsx","03-Components/c4-Paginator/Paginator.tsx","02-Features/packs/Packs.tsx","05-utils/u1-error/u2-getRandomCard/getRandomCard.ts","02-Features/learning/LearnCard/LearnCard.tsx","03-Components/c7-ErrorSnackBar/ErrorSnackBar.tsx","02-Features/learning/LearnPage.tsx","03-Components/Routes.tsx","04-Assets/Study Point._free-file.png","03-Components/Header/AuthorizedNav/NoAuthorizedNav.tsx","02-Features/auth/logaut/Logout.tsx","03-Components/Header/AuthorizedNav/AuthorizedNav.tsx","03-Components/Header/Navbar/Navbar.tsx","03-Components/Header/BurgerNav/BurgerNav.tsx","03-Components/Header/Header.tsx","03-Components/App.tsx","index.tsx","03-Components/c6-Modal/modal/Modal.module.css","02-Features/auth/login/Login.module.css","03-Components/c7-ErrorSnackBar/Error.module.css","03-Components/c1-SuperInputText/SuperInputText.module.css","02-Features/packs/Packs.module.css","02-Features/packs/CardPaksElement/CardPacksElement.module.css","03-Components/Header/error404/Error404.module.css","03-Components/c2-SuperButton/SuperButton.module.css","02-Features/profile/Profile.module.css","02-Features/cards/Cards.module.css","03-Components/c4-Paginator/Paginator.module.css","03-Components/c3-SuperCheckbox/SuperCheckbox.module.css","02-Features/auth/registration/Registration.module.css","02-Features/cards/Card/Card.module.css","03-Components/Header/BurgerNav/BurgerNav.module.css","03-Components/Header/Header.module.css","03-Components/Header/Navbar/Navbar.module.css","03-Components/Routes.module.css","02-Features/test/Test.module.css","03-Components/c5-Search/Search.module.css","02-Features/learning/LearnPage.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","withCredentials","baseURL","forgotMessage","authAPI","email","password","rememberMe","post","response","data","delete","from","message","resetPasswordToken","initialState","userData","_id","avatar","name","publicCardPacksCount","isLoggedIn","loginError","setUserProfileDataAC","type","status","isInitialized","setAppStatusAC","setIsInitializedAC","setIsLoggedIn","setLoginError","logOutTC","dispatch","catch","error","console","log","packsAPI","page","pageCount","packName","min","max","user_id","get","cardsPack","id","put","cardPacks","currentPage","pageSize","packsTotalCount","showAll","filter","userId","setFilter","fetchPacksTC","requestPage","a","res","cardPacksTotalCount","cardsAPI","card","grade","card_id","cards","cardsTotalCount","packUserId","fetchCardsTC","cardsPackId","search","rootReducer","combineReducers","app","state","action","login","registration","isRegistration","newPassword","isForgotPassword","isForgot","profile","resetPassword","isNewPassword","test","packs","actions","value","newPacks","payload","newCard","map","i","values","store","createStore","applyMiddleware","thunkMiddleware","window","Error404","className","classes","messageContainer","mainImage","src","alt","errorText","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","spanClassName","placeholder","restProps","finalSpanClassName","s","finalInputClassName","input","errorInput","superInput","e","currentTarget","key","SuperCheckbox","onChangeChecked","children","checkbox","checked","SuperButton","red","finalClassName","buttonStyle","default","Login","props","formContainer","onChangeHandlerEmail","onChangeHandlerPassword","onChangeHandlerRememberMe","onClick","onClickHandler","selectorError","selectorStatus","selectorUserData","selectorIsLoggedIn","LoginContainer","useDispatch","useState","setEmail","setPassword","setRememberMe","isLogin","useSelector","useCallback","to","PATH","PROFILE","loginTC","text","NEW_PASSWORD","Registration","styles","onEmailChange","onPasswordChange","registerUser","RegistrationContainer","isRegistered","registerTC","Profile","user","container","dataUser","LOGIN","RecoveryPassword","isRecoveryPassword","setIsRecoveryPassword","RESET_PASSWORD","ModalWindow","active","setActive","modal","modalActive","modalContent","modalContentActive","stopPropagation","btn","ModalForDelete","deleteModalHandlerYes","ModalForUpdateCard","setQuestionCard","setAnswerCard","updateModalHandler","Card","updateCard","removeCard","activeModalDelete","setActiveModalDelete","activeModalUpdate","setActiveModalUpdate","questionCard","answerCard","style","question","answer","button","disabled","cardsPack_id","rating","ModalForAddCards","addCardHandler","setNewQuestionCard","setNewAnswerCard","setTypeNewCard","Cards","useParams","activeModalAdd","setActiveModalAdd","newQuestionCard","newAnswerCard","typeNewCard","useEffect","serverNum","cardTestObj","Date","getTime","deletedCard","deleteCardTC","changeCard","updateCardTC","mappedCards","cardsPage","cardsBlock","ModalForAddCard","Test","CommonForm","typeIcon","setTypeIcon","showHide","initialValues","confirmPassword","formik","useFormik","validate","errors","onSubmit","callBack","resetForm","emailField","inputFormCommon","htmlFor","getFieldProps","touched","errorMessage","passwordField","showHideMenu","confirmPasswordField","submitButton","title","commonFormButton","CircularProgress","commonForm","wrapper","formTitle","formDescription","handleSubmit","checkBoxFormCommon","formGenerator","loginAdditionalField","ResetPassword","token","isPasswordChanged","passwordToken","Search","inputValue","setInputValue","searchContainer","setFilteredResults","ModalForAddPack","addPackHandler","setNamePack","setTypeNewPack","ModalForUpdateCardsPack","setTitleCard","CardPacksElement","pack","updateCardPacks","removeCardPacks","titleCard","cardsCount","inactive","activeClassName","LEARNING","CARDS","Paginator","onPageChanged","totalItemsCount","portionSize","Math","ceil","pages","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","usersPageNumber","p","classnames","selected","pageNumber","Packs","editMode","range","namePack","typeNewPack","setChecked","filtered","changeCardPacks","getState","updateCardsPackTC","packId","mappedPacks","dataForm","setSearchValueAC","target","table","getRandomCard","sum","reduce","acc","rand","random","newSum","LearnCard","setIsChecked","onNextCard","grades","mappedButton","el","ErrorSnackBar","notification","closeNotification","close","LearningPage","React","memo","isChecked","first","setFirst","length","setCard","shots","__v","created","updated","onNext","setGrade","setCardGradeTC","alert","pageContainer","REGISTRATION","TEST","PACKS","MODALS","Routes","mainContainer","path","exact","render","NoAuthorizedNav","burgerNav","burgerContainer","noAuthNav","logo","menuItem","highlight","Logout","AuthorizedNav","navContainer","item","Navbar","navbar","BurgerNav","menuIsOpen","nav","Header","navbarContainer","App","appStatus","LinearProgress","color","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b145f8b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"burgerContainer\":\"AuthorizedNav_burgerContainer__2xETX\",\"navContainer\":\"AuthorizedNav_navContainer__2xVma\",\"noAuthNav\":\"AuthorizedNav_noAuthNav__399RK\",\"logo\":\"AuthorizedNav_logo__2IUfo\",\"item\":\"AuthorizedNav_item__uyBfd\",\"activeLink\":\"AuthorizedNav_activeLink__1ThMu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"CommonForm_title__1dfgd\",\"inactive\":\"CommonForm_inactive__2YDm0\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n/*\r\n    baseURL: 'http://localhost:7542/2.0/'\r\n*/\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0'\r\n})\r\nexport type APIResponseType<D = {}> = {\r\n    data: D\r\n    statusText: string\r\n}","import {instance} from './api';\n\ntype LoginResponseType = {\n    _id: string\n    email: string\n    rememberMe: boolean,\n    isAdmin: boolean,\n    name: string\n    verified: boolean,\n    publicCardPacksCount: number\n    created: string\n    updated: string\n    __v: number\n    token: string\n    tokenDeathTime: number\n    avatar: string\n    error?: string\n}\n\ntype RegisterResponseType = {\n    error?: string\n    email?: string\n    in?: string\n    isEmailValid?: boolean\n    isPassValid?: boolean\n    emailRegExp?: {},\n    passwordRegExp?: string\n    addedUser: AddedUserType\n}\n\ntype ChangeProfileResponseType = {\n    updatedUser: LoginResponseType\n    error?: string\n    token: string\n    tokenDeathTime: number\n}\n\ntype AddedUserType = {\n    _id: string\n    email: string\n    rememberMe: boolean\n    isAdmin: boolean\n    name: string\n    verified: boolean\n    publicCardPacksCount: number\n    created: string\n    updated: string\n    __v: number\n}\n\nconst forgotMessage = `<div style=\"background-color: #00ff00; padding: 15px\">\n                            password recovery link: \n                     <a href='http://localhost:3000/?#/reset-password/$token$'>Click</a>\n                     </div>`\nexport const authAPI = {\n    login(email: string, password: string, rememberMe: boolean) {\n        return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe})\n            .then(response => response.data)\n    },\n    logout() {\n        return instance.delete<{ info: string, error?: string }>('auth/me')\n            .then(response => response.data)\n    },\n    register(email: string, password: string,) {\n        return instance.post<RegisterResponseType>('auth/register', {email, password})\n            .then(response => response.data)\n    },\n    authMe() {\n        return instance.post<LoginResponseType>('auth/me', {})\n            .then(response => response.data)\n    },\n    changeProfile(name: string, avatar: string) {\n        return instance.put<ChangeProfileResponseType>('auth/me', {name, avatar})\n            .then(response => {\n                return response.data.updatedUser\n            })\n    },\n    forgotPassword(email: string, from: string = 'test-front-dev <olgamartynovaaa@gmail.com>', message: string = forgotMessage) {\n        return instance.post<{ info: string, error?: string }>('auth/forgot', {email, from, message})\n            .then(response => response.data)\n    },\n    newPassword(password: string, resetPasswordToken: string) {\n        return instance.post<{ info: string, error?: string }>('auth/set-new-password', {password, resetPasswordToken})\n            .then(response => response.data)\n    }\n}","import {AppThunkType} from \"./store\";\r\nimport {setAppStatusAC, setIsInitializedAC} from \"./app-reducer\";\r\nimport {authAPI} from \"../00-API/auth-api\";\r\nimport {setLoginError} from \"./auth-reducer\";\r\n\r\nexport type ProfileReducerActionType =\r\n    ReturnType<typeof setUserProfileDataAC>\r\n    | ReturnType<typeof updateUserProfileDataAC>\r\n\r\nexport type UserDataType = {\r\n    email: string\r\n    _id: string\r\n    avatar: string\r\n    name: string\r\n    publicCardPacksCount: number\r\n}\r\n\r\nconst initialState = {\r\n    userData: {\r\n        email: \"\",\r\n        _id: \"\",\r\n        avatar: \"\",\r\n        name: \"\",\r\n        publicCardPacksCount: 0,\r\n    },\r\n    isLoggedIn: false,\r\n    loginError: null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ProfileReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"PROFILE/SET-PROFILE\":\r\n            return {\r\n                ...state,\r\n                userData: action.data\r\n            }\r\n        case \"PROFILE/UPDATE-PROFILE\":\r\n            return {\r\n                ...state,\r\n                userData: {...state.userData, avatar: action.avatar, name: action.name}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUserProfileDataAC = (data: UserDataType) =>\r\n    ({type: \"PROFILE/SET-PROFILE\", data} as const)\r\nconst updateUserProfileDataAC = (name: string, avatar: string) =>\r\n    ({type: \"PROFILE/UPDATE-PROFILE\", name, avatar} as const)\r\n\r\n//thunks\r\nexport const updateProfileTC = (name: string, avatar: string): AppThunkType => (dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.changeProfile(name, avatar)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(updateUserProfileDataAC(name, avatar))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setLoginError(error));\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootStateType, AppThunkType} from \"./store\";\r\nimport {authAPI} from \"../00-API/auth-api\";\r\nimport {setIsLoggedIn, setLoginError} from \"./auth-reducer\";\r\nimport {setUserProfileDataAC} from \"./profile-reducer\";\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type AppReducerActionType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setIsInitializedAC>\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-APP-STATUS':\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'APP/SET-APP-STATUS', status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\nexport const initializedAppTC = (): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.authMe()\r\n        .then(response => {\r\n            const {_id, email, avatar, publicCardPacksCount, name} = response\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setIsLoggedIn(true))\r\n            dispatch(setUserProfileDataAC({_id, email, avatar, publicCardPacksCount, name}))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setLoginError(error));\r\n            dispatch(setAppStatusAC('failed'))\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n/*\r\n\r\nexport type ActionsType = ReturnType<typeof setAppStatus> | ReturnType<typeof initializedSuccess>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n    appState: {\r\n        status: 'idle',\r\n        error: null as string | null\r\n    } as AppState\r\n}\r\nexport type AppState = {\r\n    status: RequestStatusType,\r\n    error: null | string\r\n}\r\n\r\ntype AppStateType = typeof initialState\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-APP-STATUS\":\r\n            return {...state, appState: action.status}\r\n        case \"APP/INITIALIZED-SUCCESS\":\r\n            return {...state,initialized: action.initialized\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAppStatus = (status: AppState) => ({\r\n    type: 'APP/SET-APP-STATUS', status\r\n} as const)\r\nexport const initializedSuccess = (initialized:boolean) => ({\r\n    type: 'APP/INITIALIZED-SUCCESS',initialized\r\n} as const)\r\n\r\nexport const initializeApp = () => async (dispatch: ThunkDispatch<AppRootStateType, unknown, ActionsType>) => {\r\n    try {\r\n        await dispatch(getAuthUserData)\r\n        dispatch(initializedSuccess(true))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}*/\r\n","import {loginAPI} from \"../00-API/login-api\";\r\nimport {AppRootStateType, AppThunkType} from \"./store\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {authAPI} from \"../00-API/auth-api\";\r\nimport {setUserProfileDataAC} from \"./profile-reducer\";\r\n\r\nexport type AuthReducerActionType = SetIsLoggedInActionType\r\n    | SetLoginErrorActionType\r\n\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedIn>\r\nexport type SetLoginErrorActionType = ReturnType<typeof setLoginError>\r\ntype InitialStateType = { isLoggedIn: boolean, loginError: null | string }\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    loginError: null\r\n}\r\n\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'auth/SET-IS-LOGGED-IN': {\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        }\r\n        case 'auth/SET-LOGIN-ERROR': {\r\n            return {...state, loginError: action.loginError}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'auth/SET-IS-LOGGED-IN', isLoggedIn} as const)\r\nexport const setLoginError = (loginError: string|null) => ({type: 'auth/SET-LOGIN-ERROR', loginError} as const)\r\n\r\n//thunks\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(response => {\r\n            const {email, _id, avatar, name, publicCardPacksCount} = response;\r\n            dispatch(setUserProfileDataAC({email, _id, avatar, name, publicCardPacksCount}));\r\n            dispatch(setIsLoggedIn(true));\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setLoginError(error));\r\n            dispatch(setAppStatusAC('failed'));\r\n        })\r\n}\r\n\r\nexport const logOutTC = (): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(() => {\r\n            dispatch(setIsLoggedIn(false));\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setAppStatusAC('failed'));\r\n        })\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\nexport const SET_IS_LOGIN = 'SET-IS-LOGIN';\r\nexport const SET_DATA = \"SET_DATA\";\r\n\r\nexport type ActionsLoginType = ReturnType<typeof setLoginAC> | ReturnType<typeof setData>\r\ntype LoginStateType = {\r\n    user: UserType\r\n    isLogin: boolean\r\n}\r\nexport type UserType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: number;\r\n    updated: number;\r\n    isAdmin: boolean;\r\n    verified?: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n    token: string\r\n}\r\nconst initialState: LoginStateType = {\r\n    user: {\r\n        avatar: '',\r\n        created: 5,\r\n        email: '',\r\n        isAdmin: false,\r\n        name: '',\r\n        publicCardPacksCount: 0,\r\n        rememberMe: false,\r\n        token: '',\r\n        updated: 5,\r\n        _id: '',\r\n    },\r\n    isLogin: false,\r\n}\r\n\r\nexport const authReducer = (state: LoginStateType = initialState, action: ActionsLoginType): LoginStateType => {\r\n    switch (action.type) {\r\n        case \"SET_IS_LOGIN\":\r\n            return {...state, isLogin: action.isLoggedIn};\r\n        case \"SET_DATA\": {\r\n            return {...state, user: action.userData}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setLoginAC = (isLoggedIn: boolean) => ({\r\n    type: 'SET_IS_LOGIN',\r\n    isLoggedIn\r\n} as const)\r\n\r\nexport const setData = (userData: UserType) => ({\r\n    type: \"SET_DATA\",\r\n    userData\r\n} as const)\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunk => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    try {\r\n        const res = await loginAPI.login(email, password, rememberMe)\r\n        dispatch(setData(res.data))\r\n        dispatch(setLoginAC(true))\r\n        dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n\r\n}\r\nexport const logout = (): AppThunk =>\r\n    async (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus({status: 'loading', error: null}))\r\n        try {\r\n            const res = await loginAPI.logout()\r\n            dispatch(setData(res.data))\r\n            dispatch(setLoginAC(false))\r\n            dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setAppStatus({status: 'failed', error: error}))\r\n        }\r\n\r\n    }\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    try {\r\n        const res = await loginAPI.me()\r\n        dispatch(setData(res.data))\r\n        dispatch(setAppStatus({status: 'succeeded', error: null}))\r\n        dispatch(setLoginAC(true))\r\n    } catch (e) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        dispatch(setAppStatus({status: 'failed', error: error}))\r\n    }\r\n}\r\n\r\n\r\n*/\r\n","import {Dispatch} from \"react\";\r\nimport {registrationAPI} from \"../00-API/registration-api\";\r\nimport {AppRootStateType, AppThunkType} from \"./store\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {authAPI} from \"../00-API/auth-api\";\r\n\r\nexport type RegisterReducerActionType = ReturnType<typeof setIsRegistrationDataAC>\r\n\r\ntype RegisterType = {\r\n    isRegistration: boolean\r\n}\r\n\r\nconst initialState = {} as RegisterType\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: RegisterReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"REGISTER/SET-IS-REGISTRATION-DATA\":\r\n            return {\r\n                ...state,\r\n                isRegistration: action.isRegistration\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setIsRegistrationDataAC = (isRegistration: boolean) =>\r\n    ({type: \"REGISTER/SET-IS-REGISTRATION-DATA\", isRegistration} as const)\r\n\r\nexport const registerTC = (email: string, password: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.register(email, password)\r\n        .then(() => {\r\n            dispatch(setIsRegistrationDataAC(true))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(response => {\r\n            console.log(response.error)\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}","import {passwordAPI} from \"../00-API/api-password\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppThunkType} from \"./store\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {authAPI} from \"../00-API/auth-api\";\r\n\r\nexport type RecoveryReducerActionType = ReturnType<typeof setIsForgotPasswordAC>\r\n\r\ntype RecoveryType = {\r\n    isForgotPassword: boolean\r\n}\r\n\r\nconst initialState = {} as RecoveryType\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoveryReducer = (state: InitialStateType = initialState, action: RecoveryReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"RECOVERY/SET-IS-FORGOT-PASSWORD\":\r\n            return {\r\n                ...state,\r\n                isForgotPassword: action.isForgot\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setIsForgotPasswordAC = (isForgot: boolean) =>\r\n    ({type: \"RECOVERY/SET-IS-FORGOT-PASSWORD\", isForgot})\r\n\r\nexport const forgotPasswordTC = (email: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.forgotPassword(email)\r\n        .then(() => {\r\n            dispatch(setIsForgotPasswordAC(true))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(response => {\r\n            console.log(response.error)\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}","import {passwordAPI} from \"../00-API/api-password\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"./app-reducer\";\r\nimport {authAPI} from \"../00-API/auth-api\";\r\nimport {AppThunkType} from \"./store\";\r\n\r\nexport type EnterNewPasswordReducerActionType = ReturnType<typeof setIsNewPasswordAC>\r\n\r\ntype EnterNewPasswordType = {\r\n    isNewPassword: boolean\r\n}\r\n\r\nconst initialState = {} as EnterNewPasswordType\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: EnterNewPasswordReducerActionType) => {\r\n    switch (action.type) {\r\n        case \"ENTER-NEW-PASSWORD/SET-IS-NEW-PASSWORD\":\r\n            return {\r\n                ...state,\r\n                isNewPassword: action.isNewPassword\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsNewPasswordAC = (isNewPassword: boolean) =>\r\n    ({type: \"ENTER-NEW-PASSWORD/SET-IS-NEW-PASSWORD\", isNewPassword} as const)\r\n\r\nexport const setNewPasswordTC = (newPassword: string, passwordToken: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    authAPI.newPassword(newPassword, passwordToken)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            dispatch(setIsNewPasswordAC(true))\r\n        })\r\n        .catch(response => {\r\n            console.log(response.error)\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}","export type TestActionType = {\r\n   type: string\r\n}\r\n\r\ntype ActionsType = TestActionType\r\ntype TestStateType = {\r\n}\r\nconst initialState: TestStateType = {}\r\n\r\nexport const testReducer = (state: TestStateType = initialState, action: ActionsType): TestStateType => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {instance} from \"./api\";\r\n\r\nexport type PackType = {\r\n    _id: string,\r\n    user_id?: string,\r\n    user_name?: string,\r\n    private?: boolean,\r\n    name: string,\r\n    path?: string,\r\n    grade?: number,\r\n    shots?: number,\r\n    deckCover?: string,\r\n    cardsCount?: number,\r\n    type: string,\r\n    rating?: number,\r\n    created?: string,\r\n    updated?: string,\r\n    more_id?: string,\r\n    __v?: number\r\n}\r\n\r\nexport type ResponsePackType = {\r\n    cardPacks: Array<PackType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number,\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n//type for get packs\r\nexport type FetchPacksPayloadType = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string | null\r\n}\r\n\r\n//type for post\r\nexport type CardsPackCreateType = {\r\n    name?: string\r\n    path?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    deckCover?: string\r\n    private?: boolean\r\n    type?: string\r\n}\r\n\r\n\r\nexport const packsAPI = {\r\n    fetchPacks(page: number, pageCount: number, packName: string = '', min: number, max: number, user_id: string) {\r\n        return instance.get<ResponsePackType>(`cards/pack?page=${page}&pageCount=${pageCount}&packName=${packName}&min=${min}&max=${max}&user_id=${user_id}`);\r\n    },\r\n    createPack(cardsPack: PackType) {\r\n        return instance.post(`cards/pack`, {cardsPack})\r\n            .then(response => response.data)\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n            .then(response => response.data)\r\n    },\r\n    updatePack(cardsPack:PackType) {\r\n        return instance.put(`cards/pack`, {cardsPack})\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n/*\r\nexport const packsAPI = {\r\n    getPacks(pageCount: number = 7, page: number = 1, packName: string = '', min: number, max: number, id: string) {\r\n        return instance.get<any>(`/cards/pack/?packName=${packName}&pageCount=${pageCount}&page=${page}&sortPacks=&min=${min}&max=${max}&user_id=${id}`)\r\n    },\r\n    fetchPacks(data: PacksParamsType) {\r\n        return instance.get<ResponseType>(`cards/pack?`,\r\n            {params: {...data}})\r\n            .then(response => response.data)\r\n    },\r\n    addPack() {\r\n        return instance.post('cards/pack', {cardsPack: {name: \"Testik 2\", type: \"pack\"}})\r\n    },\r\n    updatePack(_id: string) {\r\n        return instance.put('cards/pack', {cardsPack: {_id, name: \"Testik 2 changed\"}})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete('cards/pack', {params: {id}})\r\n    }\r\n}\r\n\r\nexport type ResponseType = {\r\n    cardPacks: Array<PackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type PackType = {\r\n    cardsCount: number\r\n    created: string\r\n    deckCover: null | string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}\r\n*/\r\n","import {CardsPackCreateType, FetchPacksPayloadType, packsAPI, PackType, ResponsePackType} from \"../00-API/packs-api\";\r\nimport {AppRootStateType, AppThunkType} from \"./store\";\r\nimport {toast} from \"react-hot-toast\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {setAppStatusAC, setIsInitializedAC} from \"./app-reducer\";\r\n\r\nexport type PacksReducerActionType = ReturnType<typeof setPacks>\r\n    | ReturnType<typeof setFilter>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof showMode>\r\n    | ReturnType<typeof setPacksTotalCount>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n    | ReturnType<typeof createCardPacks>\r\n    | ReturnType<typeof setAppStatusAC>\r\n\r\nexport type PacksFilterType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    userId: string,\r\n}\r\n\r\nconst initialState = {\r\n    cardPacks: [] as PackType[],\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    packsTotalCount: 5,\r\n    showAll: false,\r\n    filter: {\r\n        packName: '',\r\n        min: 0,\r\n        max: 15,\r\n        userId: '',\r\n    } as PacksFilterType\r\n}\r\n\r\nexport type PackInitialStateType = typeof initialState\r\n\r\nexport const packsReducer = (state: PackInitialStateType = initialState, actions: PacksReducerActionType) => {\r\n    switch (actions.type) {\r\n        case 'CARDS/CARD-PACKS/SET-CURRENT-PAGE':\r\n            return {...state, currentPage: actions.currentPage};\r\n        case 'CARDS/CARD-PACKS/SET-PACKS-TOTAL-COUNT':\r\n            return {...state, packsTotalCount: actions.packsTotalCount};\r\n        case 'CARDS/CARD-PACKS/SET-FILTER':\r\n            return {...state, filter: actions.filter}\r\n        case 'CARDS/CARD-PACKS/SET-SHOW-MODE':\r\n            return {...state, showAll: actions.value}\r\n        case 'CARDS/CARD-PACKS/SET-CARDS':\r\n            return {...state, cardPacks: actions.cardPacks}\r\n        case 'CARDS/CARD-PACKS/ADD-CARDS':\r\n            return {...state, cardPacks: [actions.newPacks, ...state.cardPacks]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setPacks = (cardPacks: PackType[]) => ({type: 'CARDS/CARD-PACKS/SET-CARDS', cardPacks} as const)\r\nexport const createCardPacks = (newPacks: PackType) => ({type: 'CARDS/CARD-PACKS/ADD-CARDS', newPacks} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({\r\n    type: 'CARDS/CARD-PACKS/SET-CURRENT-PAGE',\r\n    currentPage\r\n} as const)\r\nexport const setPacksTotalCount = (packsTotalCount: number) => ({\r\n    type: 'CARDS/CARD-PACKS/SET-PACKS-TOTAL-COUNT',\r\n    packsTotalCount\r\n} as const)\r\nexport const setFilter = (filter: PacksFilterType) => ({\r\n    type: 'CARDS/CARD-PACKS/SET-FILTER', filter\r\n} as const)\r\nexport const showMode = (value: boolean) => ({\r\n    type: 'CARDS/CARD-PACKS/SET-SHOW-MODE', value\r\n} as const)\r\n\r\nexport const fetchPacksTC = (requestPage: number, pageSize: number, filter: PacksFilterType) => async (dispatch: Dispatch<PacksReducerActionType>) => {\r\n\r\n    dispatch(setCurrentPage(requestPage))\r\n    dispatch(setFilter(filter))\r\n    dispatch(setAppStatusAC('loading'))\r\n\r\n    try {\r\n        const res = await packsAPI.fetchPacks(requestPage, pageSize, filter.packName, filter.min, filter.max, filter.userId)\r\n        dispatch(setPacks(res.data.cardPacks))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(setPacksTotalCount(res.data.cardPacksTotalCount))\r\n    } catch (e) {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\n/*\r\n\r\nexport const createCardsPackTC = (cardsPack: PackType) => async (dispatch: ThunkDispatch<AppRootStateType, unknown, PacksReducerActionType>, getState: () => AppRootStateType) => {\r\n    const requestPage = getState().packs.currentPage\r\n    const pageSize = getState().packs.pageSize\r\n    const filter = getState().packs.filter\r\n    dispatch(setAppStatusAC('loading'))\r\n\r\n    try {\r\n        await packsAPI.createPack(cardsPack)\r\n        dispatch(fetchPacksTC(requestPage, pageSize, filter))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch(setIsInitializedAC(true))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n*/\r\n\r\nexport const addCardPacks = (cardPacks: PackType) => async (dispatch: ThunkDispatch<AppRootStateType, unknown, PacksReducerActionType>, getState: () => AppRootStateType) => {\r\n\r\n    const requestPage = getState().packs.currentPage\r\n    const pageSize = getState().packs.pageSize\r\n    const filter = getState().packs.filter\r\n    dispatch(setAppStatusAC('loading'))\r\n\r\n    try {\r\n        await packsAPI.createPack(cardPacks)\r\n        dispatch(setAppStatusAC('succeeded'))\r\n        dispatch(fetchPacksTC(requestPage, pageSize, filter))\r\n    } catch (e) {\r\n        console.log(e)\r\n        dispatch(setIsInitializedAC(true))\r\n        dispatch(setAppStatusAC('failed'))\r\n    }\r\n}\r\n\r\nexport const updateCardsPackTC = (cardsPack:PackType): AppThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, PacksReducerActionType>, getState: () => AppRootStateType) => {\r\n    const requestPage = getState().packs.currentPage\r\n    const pageSize = getState().packs.pageSize\r\n    const filter = getState().packs.filter\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.updatePack(cardsPack)\r\n        .then(() => {\r\n            dispatch(fetchPacksTC(requestPage, pageSize, filter))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardsPackTC = (id: string): AppThunkType => (dispatch: ThunkDispatch<AppRootStateType, unknown, PacksReducerActionType>, getState: () => AppRootStateType) => {\r\n    const requestPage = getState().packs.currentPage\r\n    const pageSize = getState().packs.pageSize\r\n    const filter = getState().packs.filter\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.deletePack(id)\r\n        .then(() => {\r\n            dispatch(fetchPacksTC(requestPage, pageSize, filter))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\n\r\n/*\r\nexport const updateCardsPackTC = (_id: string, name: string, count: number, userId: string | null): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.updatePack(_id, name)\r\n        .then(() => {\r\n            dispatch(fetchPacksTC({pageCount: count, user_id: userId}))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardsPackTC = (id: string, count: number, userId: string | null): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.deletePack(id)\r\n        .then(() => {\r\n            dispatch(fetchPacksTC({pageCount: count, user_id: userId}))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n*/\r\n\r\n\r\n/*\r\n\r\nexport type PacksParamsType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    sortPacks: number\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number,\r\n    user_id: string\r\n}\r\n\r\ntype PacksStateType = {\r\n    packsList: Array<PackType>\r\n    packsParams: PacksParamsType\r\n    error: string | null\r\n}\r\nconst initialState: PacksStateType = {\r\n    packsList: [],\r\n    packsParams: {\r\n        packName: \"\",\r\n        min: 0,\r\n        max: 50,\r\n        sortPacks: 0,\r\n        page: 1,\r\n        pageCount: 10,\r\n        cardPacksTotalCount: 0,\r\n        user_id: \"\"\r\n\r\n    },\r\n    error: null\r\n}\r\n\r\nexport const packsReducer = (state: PacksStateType = initialState, action: PacksActionsType) => {\r\n    switch (action.type) {\r\n        case \"SET_PACKS\":\r\n            return {...state, packsList: action.packsList}\r\n        case \"SET_PACKS_SEARCH_TERM\":\r\n            return {...state, packsParams: {...state.packsParams, packName: action.packName}}\r\n        case \"SET_CARD_PACKS_TOTAL_COUNT\":\r\n            return {...state, packsParams: {...state.packsParams, cardPacksTotalCount: action.cardPacksTotalCount}}\r\n        case 'PACKS/SET_PAGE':\r\n            return {...state, packsParams: {...state.packsParams, page: action.page}}\r\n        case \"PACKS/SET_ERROR\":\r\n            return {...state, error: action.error}\r\n        case 'SET_PAGINATION_PROPERTY':\r\n            return {...state, pagination: {...state.packsParams, ...action.property}}\r\n        case 'PACKS/SET-PACKS':\r\n            return {\r\n                ...state, ...action.packsData\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n*/\r\n/*\r\n\r\n// Actions\r\nexport const setPaginationAC = (property: PacksParamsType) =>\r\n    ({type: 'SET_PAGINATION_PROPERTY', property} as const)\r\n\r\nexport const setPacksListAC = (packsList: Array<PackType>): SetPacksListActionType => ({\r\n    type: \"SET_PACKS\", packsList\r\n} as const)\r\nexport const SetPacksSearchTermAC = (packName: string): SetPacksSearchTermActionType => ({\r\n    type: 'SET_PACKS_SEARCH_TERM',\r\n    packName\r\n} as const)\r\nexport const setCardPacksTotalCountAC = (cardPacksTotalCount: number): SetCardPacksTotalCountActionType => ({\r\n    type: 'SET_CARD_PACKS_TOTAL_COUNT', cardPacksTotalCount\r\n} as const)\r\nexport const setPageAC = (page: number): SetPageActionType => ({\r\n    type: 'PACKS/SET_PAGE', page\r\n} as const)\r\nexport const setPacksErrorAC = (error: null | string): SetPacksErrorActionType => ({\r\n    type: 'PACKS/SET_ERROR', error\r\n} as const)\r\nexport const setPacksDataAC = (packsData: ResponseType) =>\r\n    ({type: 'PACKS/SET-PACKS', packsData} as const)\r\n\r\n// TC\r\n*/\r\n\r\n/*\r\nexport const fetchPacksTC = (packsParams: PacksParamsType): AppThunk => (dispatch) => {\r\n    packsAPI.fetchPacks(packsParams).then((res) => {\r\n        dispatch(setPacksListAC(res.data.cardPacks))\r\n        dispatch(setCardPacksTotalCountAC(res.data.cardPacksTotalCount))\r\n    })\r\n}\r\n*/\r\n/*\r\nexport const fetchPacksTC = (data: PacksParamsType): any => (dispatch:Dispatch) => {\r\n    dispatch(setAppStatus({status: 'loading', error: null}))\r\n    packsAPI.fetchPacks({...data})\r\n        .then(response => {\r\n            const {\r\n                cardPacks, page, cardPacksTotalCount, minCardsCount,\r\n                maxCardsCount, token, tokenDeathTime, pageCount = 8\r\n            } = response\r\n            dispatch(setPacksDataAC({\r\n                cardPacks, page, cardPacksTotalCount,\r\n                minCardsCount, maxCardsCount, token, tokenDeathTime, pageCount\r\n            }))\r\n            dispatch(setPageAC(pageCount))\r\n            dispatch(setAppStatus({status:'succeeded',error:null}))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(initializedSuccess(true))\r\n            dispatch(setAppStatus({status:'failed',error:error}))\r\n        })\r\n}\r\nexport const addPackTC = (packsParams: PacksParamsType): AppThunk => (dispatch) => {\r\n    packsAPI.addPack().then(() => {\r\n        dispatch(fetchPacksTC(packsParams))\r\n    })\r\n}\r\n\r\nexport const updatePackTC = (id: string, packsParams: PacksParamsType): AppThunk => (dispatch) => {\r\n    packsAPI.updatePack(id).then(() => {\r\n        dispatch(fetchPacksTC(packsParams))\r\n    })\r\n}\r\n\r\nexport const deletePackTC = (id: string, packsParams: PacksParamsType): AppThunk => (dispatch) => {\r\n    packsAPI.deletePack(id).then(() => {\r\n        dispatch(fetchPacksTC(packsParams))\r\n    })\r\n}\r\n\r\n\r\n// Types\r\nexport type SetPacksSearchTermActionType = {\r\n    type: 'SET_PACKS_SEARCH_TERM',\r\n    packName: string\r\n}\r\nexport type SetPacksListActionType = {\r\n    type: 'SET_PACKS',\r\n    packsList: Array<PackType>\r\n}\r\nexport type SetCardPacksTotalCountActionType = {\r\n    type: 'SET_CARD_PACKS_TOTAL_COUNT',\r\n    cardPacksTotalCount: number\r\n}\r\nexport type SetPageActionType = {\r\n    type: 'PACKS/SET_PAGE',\r\n    page: number\r\n}\r\nexport type SetPacksErrorActionType = {\r\n    type: 'PACKS/SET_ERROR',\r\n    error: string | null\r\n}\r\nexport type PacksActionsType =\r\n    | SetPacksSearchTermActionType\r\n    | SetPacksListActionType\r\n    | SetCardPacksTotalCountActionType\r\n    | SetPageActionType\r\n    | SetPacksErrorActionType | ReturnType<typeof setPaginationAC>|ReturnType<typeof setPacksDataAC>\r\n*/\r\n","import {instance} from './api';\r\nimport {CardType} from \"../01-redux/cards-reducer\";\r\n\r\ntype GetCardsResponseType = {\r\n    cards: CardType[],\r\n    page: number,\r\n    pageCount: number,\r\n    cardsTotalCount: number,\r\n    packUserId: string,\r\n}\r\n\r\ntype DeleteCardResponseType = {\r\n    deletedCard: {\r\n        cardsPack_id: string\r\n    }\r\n}\r\n\r\ntype UpdatedCardResponseType = {\r\n    updatedCard: {\r\n        cardsPack_id: string\r\n    }\r\n}\r\n\r\ntype UpdateGradeCardResponse = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    card_id: string\r\n    user_id: string\r\n    grade: number\r\n    shots: number\r\n}\r\n\r\nexport const cardsAPI = {\r\n    fetchCards(id: string) {\r\n        return instance.get<GetCardsResponseType>(`cards/card?cardsPack_id=${id ? id : ''}`)\r\n    },\r\n    createCard(card: CardType) {\r\n        return instance.post(`cards/card`, {card})\r\n            .then(response => response.data)\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete<DeleteCardResponseType>(`cards/card?id=${id}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    updateCard(card: CardType) {\r\n        return instance.put<UpdatedCardResponseType>(`cards/card`, {card})\r\n            .then(response => response.data)\r\n    },\r\n    setCardGrade(grade: number, card_id: string) {\r\n        return instance.put<UpdateGradeCardResponse>(`cards/grade`, {grade, card_id})\r\n    }\r\n}","import {cardsAPI} from \"../00-API/cards-api\";\r\nimport {AppActionType, AppThunkType} from \"./store\";\r\nimport {setAppStatusAC, setIsInitializedAC} from \"./app-reducer\";\r\nimport {addCardPacks} from \"./packs-reducer\";\r\n\r\n\r\nexport type CardsReducerActionType = ReturnType<typeof setCards>\r\n    | ReturnType<typeof setFilter>\r\n    | ReturnType<typeof setGrade>\r\n    | ReturnType<typeof createCard>\r\nexport type CardType = {\r\n    answer: string,\r\n    question: string,\r\n    cardsPack_id: string,\r\n    grade: number,\r\n    rating: number,\r\n    shots?: number,\r\n    type: string,\r\n    user_id?: string,\r\n    created?: string,\r\n    updated?: string,\r\n    __v?: 0,\r\n    _id: string,\r\n}\r\n\r\nexport type CardsFilterType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n}\r\n\r\nconst initialState = {\r\n    cards: [] as CardType[],\r\n    page: 1,\r\n    pageCount: 3,\r\n    cardsTotalCount: 5,\r\n    packUserId: '',\r\n    filter: {\r\n        packName: '',\r\n        min: 0,\r\n        max: 15,\r\n    } as CardsFilterType\r\n} as const\r\n\r\nexport type CardsInitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: CardsInitialStateType = initialState, action: CardsReducerActionType) => {\r\n    switch (action.type) {\r\n        case 'CARDS/CARDS/SET-FILTER':\r\n        return {...state, filter: action.payload.filter}\r\n        case 'CARDS/CARDS/SET-CARDS':\r\n            return {...state, cards: action.cards}\r\n        case 'CARDS/CARDS/ADD-CARD':\r\n            return {...state, cards: [action.newCard, ...state.cards]}\r\n        case 'CARDS/CARDS/SET-GRADE':\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(\r\n                    (card, i) => card._id === action.payload.id\r\n                        ? {...card, grade: action.payload.grade}\r\n                        : card\r\n                )\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setCards = (cards: CardType[]) => ({type: 'CARDS/CARDS/SET-CARDS', cards} as const)\r\n\r\nexport const createCard = (newCard: CardType) => ({type: 'CARDS/CARDS/ADD-CARD', newCard} as const)\r\n\r\nexport const setFilter = (filter: CardsFilterType) => ({\r\n    type: 'CARDS/CARDS/SET-FILTER', payload: {\r\n        filter\r\n    }\r\n} as const)\r\n\r\nexport const setGrade = (grade: number, id: string) => ({\r\n    type: 'CARDS/CARDS/SET-GRADE',\r\n    payload: {\r\n        id,\r\n        grade\r\n    }\r\n} as const)\r\n\r\nexport const fetchCardsTC = (cardsPackId: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.fetchCards(cardsPackId)\r\n        .then(response => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setCards(response.data.cards))\r\n        })\r\n}\r\nexport const createCardTC = (card: CardType): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.createCard(card)\r\n        .then(() => {\r\n            //const {cardsPack_id} = response.data\r\n            dispatch(fetchCardsTC(card.cardsPack_id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateCardTC = (card: CardType): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.updateCard(card)\r\n        .then(() => {\r\n            /*\r\n                        const {cardsPack_id} = response.updatedCard\r\n            */\r\n            dispatch(fetchCardsTC(card.cardsPack_id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardTC = (id: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.deleteCard(id)\r\n        .then(response => {\r\n            const {cardsPack_id} = response.deletedCard\r\n            dispatch(fetchCardsTC(cardsPack_id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const setCardGradeTC = (grade: number, id: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    cardsAPI.setCardGrade(grade, id)\r\n        .then(res => {\r\n            const id = res.data._id\r\n            const grade = res.data.grade\r\n            dispatch(setGrade(grade, id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n","type ActionsType = ReturnType<typeof setSearchValueAC> | ReturnType<typeof setMinMaxValuesAC>\n\nconst initialState = {\n    search: '',\n    min: 0,\n    max: 10\n}\n\ntype InitialStateType = typeof initialState\n\nexport const filterReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SET-SEARCH-VALUE': {\n            return {...state, search: action.value}\n        }\n        case 'SET-MIN-MAX-VALUES': {\n            return {...state, min: action.values[0], max: action.values[1]}\n        }\n        default:\n            return state\n    }\n}\n\n//actions\n\nexport const setSearchValueAC = (value: string) => ({type: 'SET-SEARCH-VALUE', value} as const)\nexport const setMinMaxValuesAC = (values: number[]) => ({type: 'SET-MIN-MAX-VALUES', values} as const)\n\n\n//thunks\n\n// export const getPacksWithFilters = (): AppThunkType => (dispatch, getState) => {\n//     let value = getState().filter.search;\n//     let min = getState().filter.min;\n//     let max = getState().filter.max;\n//     dispatch(fetchPacksTC({packName:value, min, max}))\n// }\n//\n// export const onPacksPageClickTC = (page: number): AppThunkType => (dispatch) => {\n//     dispatch(setPageValueAC(page));\n//     dispatch(fetchPacksTC({page}))\n// }\n//\n// export const onPortionPacksChangeTC = (pageCount: number): AppThunkType => (dispatch) => {\n//     dispatch(setPagesCountAC(pageCount))\n//     dispatch(fetchPacksTC({pageCount}))\n// }\n//\n// export const sortPackTC = (sortPacks: string): AppThunkType => (dispatch) => {\n//     dispatch(fetchPacksTC({sortPacks}))\n// }","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {authReducer, AuthReducerActionType} from \"./auth-reducer\";\r\nimport {RegisterReducerActionType, registrationReducer} from \"./registration-reducer\";\r\nimport {recoveryReducer, RecoveryReducerActionType} from \"./recovery-password-reducer\";\r\nimport {profileReducer, ProfileReducerActionType} from \"./profile-reducer\";\r\nimport {EnterNewPasswordReducerActionType, newPasswordReducer} from \"./new-password-reducer\";\r\nimport {testReducer} from \"./test-reducer\";\r\nimport {packsReducer, PacksReducerActionType} from \"./packs-reducer\";\r\nimport {cardsReducer, CardsReducerActionType} from \"./cards-reducer\";\r\nimport {appReducer, AppReducerActionType} from \"./app-reducer\";\r\nimport {filterReducer} from \"../03-Components/c5-Search/filter-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: authReducer,\r\n    registration: registrationReducer,\r\n    newPassword: recoveryReducer,\r\n    profile: profileReducer,\r\n    resetPassword: newPasswordReducer,\r\n    test: testReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer,\r\n    filter: filterReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport type AppActionType =AppReducerActionType | AuthReducerActionType\r\n    | RegisterReducerActionType | RecoveryReducerActionType | EnterNewPasswordReducerActionType\r\n    | PacksReducerActionType | CardsReducerActionType | ProfileReducerActionType\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppThunkType = ThunkAction<void, AppRootStateType, unknown, AppActionType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from \"react\";\r\nimport classes from './Error404.module.css';\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div>\r\n            <div className={classes.messageContainer}>\r\n                <img className={classes.mainImage} src=\"https://svgsilh.com/svg/1298794.svg\" alt=\"cat\"/>\r\n                <div className={classes.errorText}>\r\n                    <h1>Ooooops...</h1>\r\n                    <h2>404</h2>\r\n                    <h3>Page not found :(</h3>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error404;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    placeholder?: string\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type,\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName, placeholder,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange\r\n        && onChange(e);\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\"\r\n        && onEnter\r\n        && onEnter();\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput  }`;\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={type ? type : \"text\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                placeholder={placeholder}\r\n\r\n                {...restProps}\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputText;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked2: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type,\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps}\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const finalClassName = `${s.buttonStyle} ${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}/>\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './Login.module.css'\r\nimport SuperInputText from \"../../../03-Components/c1-SuperInputText/SuperInputText\";\r\nimport SuperCheckbox from \"../../../03-Components/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperButton from \"../../../03-Components/c2-SuperButton/SuperButton\";\r\n\r\ntype LoginType = {\r\n    onChangeHandlerEmail: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeHandlerPassword: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeHandlerRememberMe: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onClickHandler:()=>void\r\n    error:string|null\r\n}\r\n\r\nfunction Login(props: LoginType) {\r\n    return (\r\n        <div className={s.formContainer}>\r\n            <div>SIGN IN</div>\r\n            <SuperInputText type={'email'} placeholder={'test-login@gmail.com'} onChange={props.onChangeHandlerEmail}/>\r\n            <div><SuperInputText type={'password'} placeholder={'zxcasdqwe123'} onChange={props.onChangeHandlerPassword}/>\r\n            </div>\r\n            <div><SuperCheckbox onChange={props.onChangeHandlerRememberMe}>Remember Me</SuperCheckbox></div>\r\n            <div><SuperButton onClick={props.onClickHandler}>Sign In</SuperButton></div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Login;\r\n\r\n","import {AppRootStateType} from \"../store\";\r\n\r\nexport const selectorError = (state: AppRootStateType) => state.login.loginError\r\nexport const selectorStatus = (state: AppRootStateType) => state.app.status","import {AppRootStateType} from \"../store\";\r\nimport {UserDataType} from \"../profile-reducer\";\r\n\r\nexport const selectorUserData = (state: AppRootStateType):UserDataType => state.profile.userData\r\nexport const selectorIsLoggedIn = (state: AppRootStateType) => state.login.isLoggedIn\r\n","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport Login from \"./Login\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport s from './Login.module.css'\r\nimport {AppRootStateType} from \"../../../01-redux/store\";\r\nimport {PATH} from \"../../../03-Components/Routes\";\r\nimport {selectorError} from \"../../../01-redux/selectors/app-selectors\";\r\nimport {selectorIsLoggedIn, selectorUserData} from \"../../../01-redux/selectors/auth-selector\";\r\nimport {loginTC} from \"../../../01-redux/auth-reducer\";\r\n\r\ntype LoginContainerType = {}\r\n\r\nfunction LoginContainer() {\r\n    const dispatch = useDispatch()\r\n\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false)\r\n    const isLogin = useSelector<AppRootStateType, boolean>(selectorIsLoggedIn)\r\n    const error = useSelector<AppRootStateType, string | null>(selectorError)\r\n    let onChangeHandlerEmail = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail])\r\n    let onChangeHandlerPassword = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }, [setPassword])\r\n    let onChangeHandlerRememberMe = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setRememberMe(e.currentTarget.checked)\r\n    }, [setRememberMe])\r\n    let onClickHandler = () => {\r\n        dispatch(loginTC(email, password, rememberMe))\r\n    }\r\n\r\n    if (isLogin) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Login\r\n                onChangeHandlerEmail={onChangeHandlerEmail}\r\n                onChangeHandlerPassword={onChangeHandlerPassword}\r\n                onChangeHandlerRememberMe={onChangeHandlerRememberMe}\r\n                onClickHandler={onClickHandler}\r\n                error={error}\r\n            />\r\n            <span>\r\n                <NavLink className={s.text} to={PATH.NEW_PASSWORD}> Forget password</NavLink>\r\n            </span>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n\r\nexport default LoginContainer;\r\n\r\n","import React from \"react\";\r\nimport styles from \"./Registration.module.css\"\r\nimport SuperInputText from \"../../../03-Components/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../03-Components/c2-SuperButton/SuperButton\";\r\n\r\ntype RegistrationType = {\r\n    onEmailChange: (value: string) => void\r\n    onPasswordChange: (value: string) => void\r\n    registerUser: () => void\r\n    error: string | null\r\n}\r\n\r\nexport const Registration = (props: RegistrationType) => {\r\n\r\n    return (\r\n        <div className={styles.formContainer}>\r\n            Registration\r\n            <SuperInputText onChangeText={props.onEmailChange} type={\"email\"}/>\r\n            <SuperInputText onChangeText={props.onPasswordChange} type={\"password\"}/>\r\n            {props.error && <span className={styles.error}>{props.error}</span>}\r\n            <SuperButton onClick={props.registerUser}>Register</SuperButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Registration;\r\n\r\n","import React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Registration from \"./Registration\";\r\nimport {AppRootStateType} from \"../../../01-redux/store\";\r\nimport {selectorError} from \"../../../01-redux/selectors/app-selectors\";\r\nimport {registerTC} from \"../../../01-redux/registration-reducer\";\r\n\r\nexport const RegistrationContainer = () => {\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>((state:any) => state.registration.isRegistration)\r\n    const error = useSelector<AppRootStateType, string | null>(selectorError)//error\r\n\r\n    const onEmailChange = (value: string) =>  {\r\n        setEmail(value)\r\n    }\r\n    const onPasswordChange = (value: string) => {\r\n        setPassword(value)\r\n    }\r\n    const registerUser = () => {\r\n        dispatch(registerTC(email, password))\r\n    }\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Registration onEmailChange={onEmailChange}\r\n                          onPasswordChange={onPasswordChange}\r\n                          registerUser={registerUser}\r\n                          error={error}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default RegistrationContainer;\r\n\r\n","export default __webpack_public_path__ + \"static/media/unnamed.68a5a740.jpg\";","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../01-redux/store\";\r\nimport {selectorIsLoggedIn, selectorUserData} from \"../../01-redux/selectors/auth-selector\";\r\nimport s from \"./Profile.module.css\";\r\nimport SuperButton from \"../../03-Components/c2-SuperButton/SuperButton\";\r\nimport avatar from \"../../04-Assets/unnamed.jpg\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../03-Components/Routes\";\r\nimport {UserDataType} from \"../../01-redux/profile-reducer\";\r\n\r\nfunction Profile() {\r\n    const user = useSelector<AppRootStateType, UserDataType>(selectorUserData)\r\n    const isAuth = useSelector<AppRootStateType>(selectorIsLoggedIn)\r\n    if (!isAuth) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div className={s.container}>\r\n\r\n            <img className={s.avatar} src={avatar} alt=\"\" />\r\n\r\n            <div className={s.dataUser}>\r\n                <div>Email:{user.email}</div>\r\n                <span>Hello,{user.name}</span>\r\n                <span>You have {user.publicCardPacksCount} pack</span>\r\n                <SuperButton>Edit Name</SuperButton>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport s from \"../auth/login/Login.module.css\";\r\nimport {AppRootStateType} from \"../../01-redux/store\";\r\nimport {PATH} from \"../../03-Components/Routes\";\r\nimport SuperButton from \"../../03-Components/c2-SuperButton/SuperButton\";\r\nimport {forgotPasswordTC} from \"../../01-redux/recovery-password-reducer\";\r\n\r\nfunction RecoveryPassword() {\r\n    const isForgot = useSelector<AppRootStateType, boolean>((state:any) => state.newPassword.isForgot)\r\n    const [isRecoveryPassword, setIsRecoveryPassword] = useState<string>('')\r\n    const dispatch = useDispatch();\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setIsRecoveryPassword(e.currentTarget.value)\r\n    }\r\n    const sendEmail = () => {\r\n        dispatch(forgotPasswordTC(isRecoveryPassword))\r\n    }\r\n    if (isForgot) {\r\n        return <Redirect to={PATH.RESET_PASSWORD}/>\r\n    }\r\n    return (\r\n        <div className={s.formContainer}>\r\n            <form>\r\n                <span>Email:</span>\r\n                <div>olgamartynovaaa@gmail.com<input type={'email'} onChange={onChangePasswordHandler}/>\r\n                </div>\r\n                <div>\r\n                    <div><SuperButton onClick={sendEmail}>Send</SuperButton></div>\r\n                </div>\r\n            </form>\r\n            <div>\r\n                <NavLink className={s.text} to={PATH.LOGIN}>Login</NavLink>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default RecoveryPassword;\r\n","import React from 'react';\r\nimport s from './Modal.module.css'\r\n\r\n\r\ntype ModalPropsType = {\r\n    active: boolean,\r\n    setActive: (active: boolean) => void\r\n}\r\n\r\nconst ModalWindow: React.FC<ModalPropsType> = ({active, setActive, children}) => {\r\n    return <div className={active ? `${s.modal} + ${s.modalActive}` : s.modal} onClick={() => setActive(false)}>\r\n        <div className={active ? `${s.modalContent} + ${s.modalContentActive}` : s.modalContent}\r\n             onClick={(e) => e.stopPropagation()}>\r\n            <button className={s.btn} onClick={() => setActive(false)}>x</button>\r\n            {children}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ModalWindow;","import React from 'react';\nimport SuperButton from \"../../c2-SuperButton/SuperButton\";\nimport ModalWindow from \"../modal/ModalWindow\";\n\n\ntype ModalDeletePropsType = {\n    active: boolean,\n    setActive: (active: boolean) => void,\n    deleteModalHandlerYes: () => void\n}\n\nconst ModalForDelete: React.FC<ModalDeletePropsType> = ({deleteModalHandlerYes, setActive, active}) => {\n    const deleteModalHandlerNo = () => {\n        setActive(false)\n    }\n    return <div>\n        <ModalWindow active={active} setActive={setActive}>\n            <h4>ARE YOU SURE?</h4>\n            <SuperButton onClick={deleteModalHandlerYes}>Yes</SuperButton>\n            <SuperButton onClick={deleteModalHandlerNo}>No</SuperButton>\n        </ModalWindow>\n    </div>\n\n}\n\nexport default ModalForDelete;","import React, {ChangeEvent} from 'react';\nimport ModalWindow from \"../modal/ModalWindow\";\nimport SuperInputText from \"../../c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../../c2-SuperButton/SuperButton\";\n\n\n\ntype ModalUpdatePropsType = {\n    active: boolean,\n    setActive: (active: boolean) => void,\n    setQuestionCard: (q: string) => void,\n    setAnswerCard: (a: string) => void,\n    updateModalHandler: () => void\n}\n\nconst ModalForUpdateCard: React.FC<ModalUpdatePropsType> = ({setActive, active, setQuestionCard, setAnswerCard, updateModalHandler}) => {\n    const handlerForUpdateQuestionCard = (e: ChangeEvent<HTMLInputElement>) => {\n        setQuestionCard(e.currentTarget.value)\n    }\n    const handlerForUpdateAnswerCard = (e: ChangeEvent<HTMLInputElement>) => {\n        setAnswerCard(e.currentTarget.value)\n    }\n    const updateModalHandlerCancel = () => {\n        setActive(false)\n    }\n\n    return <div>\n        <ModalWindow active={active} setActive={setActive}>\n            <h4>YOU CAN DO SOME CHANGES</h4>\n            <SuperInputText type={'text'} onChange={handlerForUpdateQuestionCard}\n                                placeholder={'Here you can update question'}/>\n            <SuperInputText type={'text'} onChange={handlerForUpdateAnswerCard}\n                                placeholder={'Here you can update answer'}/>\n            <SuperButton onClick={updateModalHandler}>Update</SuperButton>\n            <SuperButton onClick={updateModalHandlerCancel}>Cancel</SuperButton>\n        </ModalWindow>\n    </div>\n}\n\nexport default ModalForUpdateCard;","import React, {useState} from \"react\";\r\nimport style from \"./Card.module.css\"\r\nimport SuperButton from \"../../../03-Components/c2-SuperButton/SuperButton\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../01-redux/store\";\r\nimport ModalForDelete from \"../../../03-Components/c6-Modal/ModalForCards/ModalForDelete\";\r\nimport ModalForUpdateCard from \"../../../03-Components/c6-Modal/ModalForCards/ModalForUpdateCard\";\r\nimport {CardType} from \"../../../01-redux/cards-reducer\";\r\n\r\ntype CardPropsType = {\r\n    card: CardType\r\n    updateCard: (card: CardType) => void\r\n    removeCard: (id: string) => void\r\n}\r\n\r\nconst Card: React.FC<CardPropsType> = ({\r\n                                           card,\r\n                                           updateCard,\r\n                                           removeCard\r\n                                       }) => {\r\n\r\n    //for modal\r\n    const [activeModalDelete, setActiveModalDelete] = useState<boolean>(false)\r\n    const [activeModalUpdate, setActiveModalUpdate] = useState<boolean>(false)\r\n    const [questionCard, setQuestionCard] = useState<string>('')\r\n    const [answerCard, setAnswerCard] = useState<string>('')\r\n\r\n    //for disabled\r\n    const userId = useSelector<AppRootStateType, string>(state => state.profile.userData._id)\r\n//for delete\r\n    const deleteModalHandlerYes = () => {\r\n        removeCard(card._id)\r\n    }\r\n\r\n    //for update\r\n    const updateModalHandler = () => {\r\n        updateCard({\r\n            _id: card._id,\r\n            type: 'Java',\r\n            question: questionCard,\r\n            answer: answerCard,\r\n            cardsPack_id: card.cardsPack_id,\r\n            grade: 4.54654,\r\n            rating: 0\r\n        })\r\n        setActiveModalUpdate(false)\r\n    }\r\n\r\n    const onUpdateHandler = () => {\r\n        setActiveModalUpdate(true)\r\n    }\r\n\r\n    const onRemoveHandler = () => {\r\n        setActiveModalDelete(true)\r\n    }\r\n\r\n    return (\r\n        <div className={style.card}>\r\n            <h5>{card.question ? card.question : 'empty question'}</h5>\r\n            <p>{card.answer ? card.answer : 'empty answer'}</p>\r\n            <p>type of card: {card.type ? card.type : 'empty type'} </p>\r\n            <p>grade: </p>\r\n            <p>{card.grade}</p>\r\n            <div className={style.button}>\r\n                <SuperButton onClick={onUpdateHandler} disabled={card.user_id !== userId}>Update</SuperButton>\r\n                <SuperButton onClick={onRemoveHandler} disabled={card.user_id !== userId}>Delete</SuperButton>\r\n            </div>\r\n            <ModalForDelete active={activeModalDelete}\r\n                            setActive={setActiveModalDelete}\r\n                            deleteModalHandlerYes={deleteModalHandlerYes}/>\r\n\r\n            <ModalForUpdateCard active={activeModalUpdate}\r\n                                setActive={setActiveModalUpdate}\r\n                                setQuestionCard={setQuestionCard}\r\n                                setAnswerCard={setAnswerCard}\r\n                                updateModalHandler={updateModalHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, {ChangeEvent} from 'react';\nimport ModalWindow from \"../modal/ModalWindow\";\nimport SuperInputText from \"../../c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../../c2-SuperButton/SuperButton\";\n\n\ntype ModalAddPropsType = {\n    active: boolean,\n    setActive: (active: boolean) => void\n    addCardHandler: () => void,\n    setNewQuestionCard: (q: string) => void,\n    setNewAnswerCard: (q: string) => void,\n    setTypeNewCard: (t: string) => void\n}\n\nconst ModalForAddCards: React.FC<ModalAddPropsType> = ({\n                                                           active,\n                                                           setActive,\n                                                           addCardHandler,\n                                                           setNewQuestionCard,\n                                                           setNewAnswerCard,\n                                                           setTypeNewCard\n                                                       }) => {\n\n\n    const handlerForAddQuestionCard = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewQuestionCard(e.currentTarget.value)\n\n    }\n    const handlerForAddAnswerCard = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewAnswerCard(e.currentTarget.value)\n\n    }\n    const handlerForAddTypeCard = (e: ChangeEvent<HTMLInputElement>) => {\n        setTypeNewCard(e.currentTarget.value)\n\n    }\n    const addCardHandlerCancel = () => {\n        setActive(false)\n    }\n    return <div>\n        <ModalWindow active={active} setActive={setActive}>\n            <h4>ADD NEW CARD</h4>\n            <p>QUESTION</p><SuperInputText type={'text'} onChange={handlerForAddQuestionCard}\n                                           placeholder={'Write your question here'}/>\n            <p>ANSWER</p> <SuperInputText type={'text'} onChange={handlerForAddAnswerCard}\n                                          placeholder={'Be sure to specify the answer'}/>\n            <p>TYPE</p> <SuperInputText type={'text'} onChange={handlerForAddTypeCard} placeholder={'Specify a type'}/>\n            <SuperButton onClick={addCardHandler}>ADD</SuperButton>\n            <SuperButton onClick={addCardHandlerCancel}>Cancel</SuperButton>\n        </ModalWindow>\n    </div>\n\n}\n\nexport default ModalForAddCards;\n","import React, {useEffect, useState} from \"react\";\r\nimport style from \"./Cards.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    CardType,\r\n    createCardTC,\r\n    deleteCardTC, fetchCardsTC,\r\n    updateCardTC\r\n} from \"../../01-redux/cards-reducer\";\r\nimport Card from \"./Card/Card\";\r\nimport {RouteComponentProps, useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../01-redux/store\";\r\nimport SuperButton from \"../../03-Components/c2-SuperButton/SuperButton\";\r\nimport ModalForAddCards from \"../../03-Components/c6-Modal/ModalForCards/ModalForAddCard\";\r\n\r\n\r\nexport const Cards: React.FC = () => {\r\n    const {id} = useParams<{ id: string }>();\r\n    const cards = useSelector<AppRootStateType, CardType[]>(state => state.cards.cards)\r\n    const dispatch = useDispatch()\r\n\r\n    //for modal\r\n    const [activeModalAdd, setActiveModalAdd] = useState<boolean>(false)\r\n    const [newQuestionCard, setNewQuestionCard] = useState<string>('')\r\n    const [newAnswerCard, setNewAnswerCard] = useState<string>('')\r\n    const [typeNewCard, setTypeNewCard] = useState<string>('undefined')\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCardsTC(id))\r\n    }, [])\r\n\r\n    function genID(serverNum: number) {\r\n        return (serverNum + '' + (new Date).getTime());\r\n    }\r\n\r\n    const cardTestObj: CardType = {\r\n        _id: genID(2),\r\n        type: typeNewCard,\r\n        question: newQuestionCard,\r\n        answer: newAnswerCard,\r\n        cardsPack_id: id,\r\n        grade: 4.54654,\r\n        rating: 0\r\n    }\r\n\r\n    const addCardHandler = () => {\r\n        dispatch(createCardTC(cardTestObj))\r\n        setActiveModalAdd(false)\r\n    }\r\n    const onAddCard = () => {\r\n        setActiveModalAdd(true)\r\n    }\r\n\r\n    const removeCard = (id: string) => {\r\n        dispatch(deleteCardTC(id))\r\n    }\r\n\r\n    const changeCard = (card: CardType) => {\r\n        dispatch(updateCardTC(card))\r\n    }\r\n\r\n    const mappedCards = cards.map((card: CardType) => <Card key={card._id}\r\n                                                            card={card}\r\n                                                            updateCard={changeCard}\r\n                                                            removeCard={removeCard}/>)\r\n\r\n    return <>\r\n        <div className={style.cardsPage}>\r\n            <div>\r\n                <h4> AVAILABLE CARDS </h4>\r\n            </div>\r\n            <div className={style.cardsBlock}>\r\n                {\r\n                    mappedCards\r\n                }\r\n            </div>\r\n            <div className={style.search}>\r\n                <SuperButton onClick={onAddCard}>Add Card</SuperButton>\r\n            </div>\r\n        </div>\r\n        <ModalForAddCards active={activeModalAdd} setActive={setActiveModalAdd} addCardHandler={addCardHandler}\r\n                          setNewQuestionCard={setNewQuestionCard} setNewAnswerCard={setNewAnswerCard}\r\n                          setTypeNewCard={setTypeNewCard}/>\r\n    </>\r\n}","import React from \"react\";\r\nimport styles from './Test.module.css'\r\nimport SuperInputText from \"../../03-Components/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../03-Components/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../03-Components/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\nconst Test = () => {\r\n    return (\r\n        <div className={styles.container}>\r\n           <SuperInputText />\r\n            <SuperButton>Click me </SuperButton>\r\n           <SuperCheckbox />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Test;\r\n","import {useFormik} from \"formik\";\r\nimport {useState} from \"react\";\r\nimport s from './CommonForm.module.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Toaster} from 'react-hot-toast';\r\nimport {AppRootStateType} from \"../../01-redux/store\";\r\nimport {RequestStatusType} from \"../../01-redux/app-reducer\";\r\nimport SuperInputText from \"../c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../c2-SuperButton/SuperButton\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport SuperCheckbox from \"../c3-SuperCheckbox/SuperCheckbox\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\ntype FormPropsType = {\r\n    type: 'Login' | 'Register' | 'Recovery password' | 'New password'\r\n    callBack: (values: any) => void\r\n}\r\n\r\nexport const CommonForm = (props: FormPropsType) => {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const [typeIcon, setTypeIcon] = useState<string>('password')\r\n\r\n    const showHide = () => {\r\n        setTypeIcon(typeIcon === 'text' ? 'password' : 'text')\r\n    }\r\n\r\n    // SET initial values for Formik start\r\n    let initialValues: any = null\r\n\r\n    if (props.type === 'Login') {\r\n        initialValues = {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        }\r\n    }\r\n\r\n    if (props.type === 'Register') {\r\n        initialValues = {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        }\r\n    }\r\n\r\n    if (props.type === 'Recovery password') {\r\n        initialValues = {\r\n            email: '',\r\n        }\r\n    }\r\n\r\n    if (props.type === 'New password') {\r\n        initialValues = {\r\n            email: 'test@gmail.com',\r\n            password: '',\r\n            confirmPassword: '',\r\n        }\r\n    }\r\n\r\n    // SET initial values for Formik end\r\n    const formik = useFormik({\r\n\r\n        initialValues,\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (props.type === 'Login' || props.type === 'Register' || props.type === 'New password') { // Check PASSWORD field only if form for Login or Register or New password\r\n                if (!values.password) {\r\n                    errors.password = 'Password is required';\r\n                } else if (!/(?=.*[0-9])/gi.test(values.password)) {\r\n                    errors.password = 'The password must contain at least one number'\r\n                } else if (!/(?=.*[a-z])(?=.*[A-Z])/gi.test(values.password)) {\r\n                    errors.password = 'The password  must contain at least one lowercase or uppercase Latin letter'\r\n                } else if (!/[0-9a-zA-Z!@#$%^&*]{8,}/gi.test(values.password)) {\r\n                    errors.password = 'The password must have a minimum 8 characters'\r\n                }\r\n            }\r\n\r\n            if (props.type === 'Register' || props.type === 'New password'\r\n            ) { // Check CONFIRM PASSWORD field only if form for Register or New password\r\n                if (!values.confirmPassword) {\r\n                    errors.confirmPassword = 'Confirm password is required';\r\n                } else if (values.password !== values.confirmPassword) {\r\n                    errors.confirmPassword = 'The password and confirm password fields do not match.';\r\n                }\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            props.callBack(values)\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    // Reusable Email Field\r\n    const emailField = () => {\r\n        return <>\r\n            <div className={s.inputFormCommon}>\r\n                <label htmlFor=\"email\"/>\r\n                <SuperInputText\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    placeholder='e-mail'\r\n                    {...formik.getFieldProps('email')}\r\n                />\r\n                {formik.errors.email && formik.touched.email &&\r\n                <div className={s.errorMessage}>{formik.errors.email}</div>}\r\n            </div>\r\n        </>\r\n    }\r\n    // Reusable Password Field\r\n    const passwordField = () => {\r\n        return <>\r\n            <div className={s.inputFormCommon}>\r\n                <label htmlFor=\"password\"/>\r\n                <SuperInputText\r\n                    id=\"password\"\r\n                    placeholder='password'\r\n                    type={typeIcon}\r\n                    {...formik.getFieldProps('password')}\r\n                />\r\n                <span className={s.showHideMenu}\r\n                      onClick={showHide}>{typeIcon === 'text' ? '🔒' : '🔑'}</span>\r\n                {formik.errors.password && formik.touched.password &&\r\n                <div className={s.errorMessage}>{formik.errors.password}</div>}\r\n            </div>\r\n        </>\r\n    }\r\n    // Reusable Confirm Password Field\r\n    const confirmPasswordField = () => {\r\n        return <>\r\n            <div className={s.inputFormCommon}>\r\n                <label htmlFor=\"confirmPassword\"/>\r\n                <SuperInputText\r\n                    type=\"password\"\r\n                    placeholder='confirm password'\r\n                    {...formik.getFieldProps('confirmPassword')}\r\n                />\r\n                {formik.errors.confirmPassword && formik.touched.confirmPassword &&\r\n                <div className={s.errorMessage}>{formik.errors.confirmPassword}</div>}\r\n            </div>\r\n        </>\r\n    }\r\n    // Reusable Checkbox Field\r\n    const checkBoxField = () => {\r\n        return <>\r\n            <div className={s.checkBoxFormCommon}>\r\n                <label htmlFor=\"rememberMe\"/>\r\n                <SuperCheckbox\r\n                    id=\"rememberMe\"\r\n                    type=\"checkbox\"\r\n                    children={'Remember me'}\r\n                    //placeholder='confirm password'\r\n                    {...formik.getFieldProps('rememberMe')}\r\n                />\r\n            </div>\r\n        </>\r\n    }\r\n    // Reusable Button\r\n    const submitButton = (title: string) => {\r\n        return <>\r\n            <div className={s.commonFormButton}>\r\n                <SuperButton\r\n                    disabled={status === \"loading\"}\r\n                    className={s.button}\r\n                    type=\"submit\">{title}\r\n                </SuperButton>\r\n            </div>\r\n        </>\r\n    }\r\n\r\n    // Form Generator\r\n    const formGenerator = () => {\r\n        switch (props.type) {\r\n            case 'Login' :\r\n                return <>\r\n                    {emailField()}\r\n                    {passwordField()}\r\n                    {checkBoxField()}\r\n                    {submitButton('Login')}\r\n                </>\r\n            case 'Register' :\r\n                return <>\r\n                    {emailField()}\r\n                    {passwordField()}\r\n                    {confirmPasswordField()}\r\n                    {submitButton('Register')}\r\n                </>\r\n            case 'Recovery password' :\r\n                return <>\r\n                    {emailField()}\r\n                    {submitButton('Send')}\r\n                </>\r\n            case 'New password' :\r\n                return <>\r\n                    {passwordField()}\r\n                    {confirmPasswordField()}\r\n                    {submitButton('Send')}\r\n                </>\r\n            default :\r\n                return <>\r\n                    {emailField()}\r\n                    {passwordField()}\r\n                    {confirmPasswordField()}\r\n                    {submitButton('N/A')}\r\n                </>\r\n        }\r\n    }\r\n\r\n    const formTitle = (type: string) => {\r\n        switch (type) {\r\n            case 'Login':\r\n                return 'Sign In'\r\n            case 'Register':\r\n                return 'Sign Up'\r\n            case 'Recovery password':\r\n                return 'Recover Password'\r\n            case 'New password':\r\n                return 'New Password'\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const formDescription = (type: string) => {\r\n        switch (type) {\r\n            case 'Register':\r\n                return 'Please fill in the form below'\r\n            case 'Recovery password':\r\n                return 'Please, enter your email';\r\n            case 'New password':\r\n                return 'Please, enter and confirm your new password'\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const loginAdditionalField = (type: string) => {\r\n        switch (type) {\r\n            case 'Login':\r\n                return <div className={s.loginAdditionalField}>\r\n                    <NavLink to='/recovery'>Forgot your password?</NavLink>\r\n                    <NavLink to='/register'>Go to sign up</NavLink>\r\n                </div>\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div><Toaster/></div>\r\n            {status === \"loading\" && <CircularProgress/>}\r\n            <div className={s.commonForm}>\r\n                <div className={s.wrapper}>\r\n                    {/* Form Title */}\r\n                    <span className={s.formTitle}>{formTitle(props.type)}</span>\r\n                    {/* Form Description */}\r\n                    <span className={s.formDescription}>{formDescription(props.type)}</span>\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        {/* Form generator function */}\r\n                        {formGenerator()}\r\n                    </form>\r\n                    {/* Form additional field*/}\r\n                    {loginAdditionalField(props.type)}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {PATH} from \"../../03-Components/Routes\";\r\nimport {CommonForm} from \"../../03-Components/c8-CommonForm/CommonForm\";\r\nimport {useEffect} from \"react\";\r\nimport {RequestStatusType} from \"../../01-redux/app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../01-redux/store\";\r\nimport {Redirect, useHistory, useParams} from \"react-router-dom\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {setNewPasswordTC} from \"../../01-redux/new-password-reducer\";\r\n\r\nexport const ResetPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{token: string}>()\r\n    const isPasswordChanged = useSelector<AppRootStateType, boolean>(state => state.resetPassword.isNewPassword)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const newPasswordCallBack = (values: any) => {\r\n        dispatch(setNewPasswordTC(values.password, token))\r\n    }\r\n\r\n    if(isPasswordChanged) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {status === \"loading\" && <CircularProgress/>}\r\n            <CommonForm type={'New password'} callBack={newPasswordCallBack}/>\r\n        </>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport SuperInputText from \"../c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../c2-SuperButton/SuperButton\";\r\nimport style from \"./Search.module.css\"\r\n\r\ntype SearchPropsType = {\r\n    setFilteredResults: (packName: string) => void\r\n};\r\n\r\nconst Search: React.FC<SearchPropsType> = (props) => {\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const setSearchTerm = () => {\r\n        props.setFilteredResults(inputValue)\r\n    }\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={style.searchContainer}>\r\n            <SuperInputText placeholder={\"Type name\"} onChange={onChangeCallback}/>\r\n            <SuperButton onClick={setSearchTerm}>Search</SuperButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React, {ChangeEvent} from 'react';\r\nimport ModalWindow from \"./ModalWindow\";\r\nimport SuperInputText from \"../../c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../c2-SuperButton/SuperButton\";\r\n\r\n\r\ntype ModalAddPropsType = {\r\n    active: boolean,\r\n    setActive: (active: boolean) => void\r\n    addPackHandler: () => void,\r\n    setNamePack: (e: string) => void,\r\n    setTypeNewPack: (e: string) => void\r\n}\r\n\r\nconst ModalForAddPack: React.FC<ModalAddPropsType> = ({\r\n                                                          active, setActive,\r\n                                                          addPackHandler, setNamePack, setTypeNewPack\r\n                                                      }) => {\r\n\r\n\r\n    const handlerForAddNamePack = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNamePack(e.currentTarget.value)\r\n\r\n    }\r\n    const handlerForAddTypeNewPack = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTypeNewPack(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const addCardHandlerCancel = () => {\r\n        setActive(false)\r\n    }\r\n    return <div>\r\n        <ModalWindow active={active} setActive={setActive}>\r\n            <h4>ADD NEW PACK</h4>\r\n            <p>TITLE NEW PACK</p><SuperInputText type={'text'} onChange={handlerForAddNamePack}\r\n                                                     placeholder={'Write title here'}/>\r\n            <p>TYPE NEW PACK</p> <SuperInputText type={'text'} onChange={handlerForAddTypeNewPack}\r\n                                                     placeholder={'Write type of card pack here'}/>\r\n            <SuperButton onClick={addPackHandler}>ADD</SuperButton>\r\n            <SuperButton onClick={addCardHandlerCancel}>CANCEL</SuperButton>\r\n        </ModalWindow>\r\n    </div>\r\n\r\n}\r\n\r\nexport default ModalForAddPack;","import React, {ChangeEvent} from 'react';\nimport ModalWindow from '../modal/ModalWindow';\nimport SuperInputText from \"../../c1-SuperInputText/SuperInputText\";\nimport SuperButton from \"../../c2-SuperButton/SuperButton\";\n\n\ntype ModalUpdatePropsType = {\n    active: boolean,\n    setActive: (active: boolean) => void,\n    setTitleCard: (t: string) => void,\n    updateModalHandler: () => void\n}\n\nconst ModalForUpdateCardsPack: React.FC<ModalUpdatePropsType> = ({setActive, active, setTitleCard, updateModalHandler}) => {\n\n    const handlerForUpdateTitleCard = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitleCard(e.currentTarget.value)\n    }\n    const updateModalHandlerCancel = () => {\n        setActive(false)\n    }\n    return <div>\n        <ModalWindow active={active} setActive={setActive}>\n            <h4>HERE YOU CAN CHANGE THIS PACK</h4>\n            <SuperInputText type={'text'} onChange={handlerForUpdateTitleCard} placeholder={'Write a new title for pack'}/>\n            <SuperButton onClick={updateModalHandler}>Update</SuperButton>\n            <SuperButton onClick={updateModalHandlerCancel}>Cancel</SuperButton>\n        </ModalWindow>\n    </div>\n}\n\nexport default ModalForUpdateCardsPack;","import React, {useState} from 'react';\nimport {NavLink} from 'react-router-dom';\nimport {useSelector} from 'react-redux';\nimport s from './CardPacksElement.module.css'\nimport {PackType} from \"../../../00-API/packs-api\";\nimport {AppRootStateType} from \"../../../01-redux/store\";\nimport SuperButton from \"../../../03-Components/c2-SuperButton/SuperButton\";\nimport {PATH} from \"../../../03-Components/Routes\";\nimport ModalForDelete from \"../../../03-Components/c6-Modal/ModalForCards/ModalForDelete\";\nimport ModalForUpdateCardsPack from \"../../../03-Components/c6-Modal/ModalForCards/ModalForUpdateCardsPack\";\n\ntype CardPropsType = {\n    pack: PackType\n    updateCardPacks: (cardsPack:PackType) => void\n    removeCardPacks: (id: string) => void\n}\n\nconst CardPacksElement: React.FC<CardPropsType> = (\n    {\n        pack,\n        updateCardPacks,\n        removeCardPacks,\n    }) => {\n\n    const onUpdateHandler = () => {\n        setActiveModalUpdate(true)\n    }\n    const onRemoveHandler = () => {\n        setActiveModalDelete(true)\n    }\n\n    //for modal\n    const [activeModalDelete, setActiveModalDelete] = useState<boolean>(false)\n    const [activeModalUpdate, setActiveModalUpdate] = useState<boolean>(false)\n    const [titleCard, setTitleCard] = useState<string>('')\n    //for delete\n    const deleteModalHandlerYes = () => {\n        removeCardPacks(pack._id)\n    }\n\n    //for update\n    const updateModalHandler = () => {\n        updateCardPacks && updateCardPacks({_id: pack._id, name: titleCard, type: 'bla-type'})\n        setActiveModalUpdate(false)\n        setTitleCard('')\n    }\n    //for disabled\n    const userId = useSelector<AppRootStateType, string>(state => state.profile.userData._id)\n\n    return (<>\n            <tr>\n                <td>{pack.name}</td>\n                <td>{pack.cardsCount ? pack.cardsCount : `empty`}</td>\n                <td><SuperButton onClick={onUpdateHandler} disabled={pack.user_id !== userId}>Update</SuperButton></td>\n                <td><SuperButton onClick={onRemoveHandler} disabled={pack.user_id !== userId}>Delete</SuperButton></td>\n                <td><NavLink className={s.inactive} activeClassName={s.active}\n                             to={PATH.LEARNING + '/' + pack._id}>Learn</NavLink></td>\n                <td><NavLink className={s.inactive} activeClassName={s.active}\n                             to={PATH.CARDS + '/' + pack._id}>Cards</NavLink></td>\n            </tr>\n            <ModalForDelete active={activeModalDelete} setActive={setActiveModalDelete}\n                                     deleteModalHandlerYes={deleteModalHandlerYes}/>\n            <ModalForUpdateCardsPack active={activeModalUpdate} setActive={setActiveModalUpdate}\n                                     setTitleCard={setTitleCard}\n                                     updateModalHandler={updateModalHandler}/>\n        </>\n    )\n}\n\nexport default CardPacksElement\n","import React, {useState} from 'react'\r\nimport classnames from 'classnames'\r\nimport s from './Paginator.module.css'\r\nimport SuperButton from \"../c2-SuperButton/SuperButton\";\r\n\r\ntype PropsType = {\r\n    currentPage: number\r\n    onPageChanged: (p: number) => void\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    portionSize?: number\r\n}\r\n\r\nexport const Paginator: React.FC<PropsType> = (\r\n    {currentPage, onPageChanged, pageSize, totalItemsCount, portionSize = 10}\r\n) => {\r\n\r\n    const pageCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n    const pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pageCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState<number>(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize + 1\r\n\r\n    const prevPortionNumberHandler = () => {\r\n        setPortionNumber(portionNumber - 1)\r\n    }\r\n\r\n    const nextPortionNumberHandler = () => setPortionNumber(portionNumber + 1)\r\n\r\n    return (\r\n        <div className={s.usersPageNumber}>\r\n            {portionCount > 1\r\n            && <SuperButton onClick={prevPortionNumberHandler}>PREV</SuperButton>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p, i) => {\r\n                    return <span key={`number_items${i}`}\r\n                                 className={classnames({\r\n                                     [s.selected]: currentPage === p\r\n                                 }, s.pageNumber)}\r\n                                 onClick={() => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber\r\n            && <SuperButton onClick={nextPortionNumberHandler}>NEXT</SuperButton>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useCallback, useEffect, useMemo, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CardsPackCreateType, PackType, ResponsePackType} from \"../../00-API/packs-api\";\r\nimport {AppRootStateType} from \"../../01-redux/store\";\r\nimport Search from \"../../03-Components/c5-Search/Search\";\r\nimport {\r\n    addCardPacks,\r\n\r\n    deleteCardsPackTC,\r\n    fetchPacksTC, PacksFilterType, setFilter,\r\n    showMode,\r\n    updateCardsPackTC\r\n} from \"../../01-redux/packs-reducer\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {setSearchValueAC} from \"../../03-Components/c5-Search/filter-reducer\";\r\nimport style from './Packs.module.css';\r\nimport SuperCheckbox from \"../../03-Components/c3-SuperCheckbox/SuperCheckbox\";\r\nimport SuperButton from \"../../03-Components/c2-SuperButton/SuperButton\";\r\nimport ModalForAddPack from \"../../03-Components/c6-Modal/modal/ModalForAddPack\";\r\nimport CardPacksElement from \"./CardPaksElement/CardPacksElement\";\r\nimport {UserDataType} from \"../../01-redux/profile-reducer\";\r\nimport {Paginator} from \"../../03-Components/c4-Paginator/Paginator\";\r\n\r\nexport const Packs: React.FC = () => {\r\n\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const packs = useSelector<AppRootStateType, PackType[]>(state => state.packs.cardPacks)\r\n\r\n    //filter data\r\n    const packsTotalCount = useSelector<AppRootStateType, number>(state => state.packs.packsTotalCount)\r\n    const filter = useSelector<AppRootStateType, PacksFilterType>(state => state.packs.filter)\r\n    const currentPage = useSelector<AppRootStateType, number>(state => state.packs.currentPage)\r\n    const pageSize = useSelector<AppRootStateType, number>(state => state.packs.pageSize)\r\n    const editMode = useSelector<AppRootStateType, boolean>(state => state.packs.showAll)\r\n\r\n    const userData = useSelector<AppRootStateType, UserDataType | null>(state => state.profile.userData)\r\n    const userId = useSelector<AppRootStateType, string>(state => state.packs.filter.userId)\r\n\r\n    //filter state\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n    const [range, setRange] = useState([0, 15])\r\n    const [isMyPackChecked, setIsMyPackChecked] = useState<boolean>(false)\r\n\r\n    //for modal\r\n    const [activeModalAdd, setActiveModalAdd] = useState<boolean>(false)\r\n    const [namePack, setNamePack] = useState<string>('')\r\n    const [typeNewPack, setTypeNewPack] = useState<string>('undefined')\r\n    const [checked, setChecked] = useState<boolean>(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onPageChanged = useCallback((currentPage: number) => {\r\n        dispatch(fetchPacksTC(currentPage, pageSize, filtered))\r\n    }, [currentPage])\r\n\r\n    const onSearch = () => dispatch(fetchPacksTC(currentPage, pageSize, filtered))\r\n    const showOwnPack = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.checked) {\r\n            dispatch(showMode(e.target.checked))\r\n            setChecked(true)\r\n        } else setChecked(false)\r\n    }\r\n    const inputHandler = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value)\r\n\r\n    const filtered: PacksFilterType = {\r\n        packName: inputValue,\r\n        min: range[0],\r\n        max: range[1],\r\n        userId: editMode && userData ? userData._id : ''\r\n    }\r\n\r\n    function genID(serverNum: number) {\r\n        return (serverNum + '' + (new Date).getTime());\r\n    }\r\n\r\n    const cardTestObj: PackType = {\r\n        _id: genID(5),\r\n        name: namePack,\r\n        type: typeNewPack\r\n    }\r\n\r\n    const onAddCardPacks = () => {\r\n        setActiveModalAdd(true)\r\n    }\r\n    const addPackHandler = () => {\r\n        dispatch(addCardPacks(cardTestObj))\r\n        setActiveModalAdd(false)\r\n    }\r\n    const changeCardPacks = (cardsPack: PackType) => {\r\n        dispatch(updateCardsPackTC(cardsPack))\r\n    }\r\n    const removeCardPacks = (packId: string) => {\r\n        dispatch(deleteCardsPackTC(packId))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(fetchPacksTC(currentPage, pageSize, filter))\r\n    }, [])\r\n\r\n\r\n    if (!packs) {\r\n        return <CircularProgress/>\r\n    }\r\n    const mappedPacks = packs.map((p: PackType) =>\r\n        <CardPacksElement key={p._id}\r\n                          pack={p}\r\n                          updateCardPacks={changeCardPacks}\r\n                          removeCardPacks={removeCardPacks}/>)\r\n\r\n    return (<>\r\n            <div className={style.dataForm}>\r\n                <div className={style.search}>\r\n                    <h4>FORM FOR SEARCH</h4>\r\n                    <Search setFilteredResults={value => dispatch(setSearchValueAC(value))}/>\r\n                    <SuperCheckbox\r\n                        checked={checked}//!!!!!!\r\n                        onChange={showOwnPack}>\r\n                        Show only mine pack\r\n                    </SuperCheckbox>\r\n                    <SuperButton onClick={onSearch}>Search</SuperButton>\r\n                    <SuperButton onClick={onAddCardPacks}>Add new CardPack</SuperButton>\r\n                </div>\r\n                <div className={style.cards}>\r\n                    <Paginator currentPage={currentPage}\r\n                               onPageChanged={onPageChanged}\r\n                               pageSize={pageSize}\r\n                               totalItemsCount={packsTotalCount}/>\r\n                    <table className={style.table}>\r\n                        <tbody> {\r\n                            mappedPacks\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <ModalForAddPack active={activeModalAdd} setActive={setActiveModalAdd} addPackHandler={addPackHandler}\r\n                             setNamePack={setNamePack} setTypeNewPack={setTypeNewPack}/>\r\n        </>\r\n    )\r\n}","import {CardType} from \"../../../01-redux/cards-reducer\";\n\nexport const getRandomCard = (cards: Array<CardType>) => {\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\n    const rand = Math.random() * sum;\n    const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\n        }\n        , {sum: 0, id: -1});\n    console.log('test: ', sum, rand, res)\n\n    return cards[res.id + 1];\n}","import React from \"react\";\r\nimport SuperButton from \"../../../03-Components/c2-SuperButton/SuperButton\";\r\nimport {CardType} from \"../../../01-redux/cards-reducer\";\r\n\r\ntype LearnCardElementPropsType = {\r\n    card: CardType,\r\n    checked: boolean,\r\n    setIsChecked: (value: boolean) => void\r\n    onNextCard: (value: number) => void\r\n    grades: string[]\r\n}\r\n\r\nexport const LearnCard: React.FC<LearnCardElementPropsType> = (\r\n    {\r\n        card,\r\n        checked,\r\n        setIsChecked,\r\n        onNextCard,\r\n        grades\r\n    }\r\n) => {\r\n\r\n    const nextCard = (value: number) => {\r\n        onNextCard(value)\r\n    }\r\n\r\n    const mappedButton = grades.map((el, i) => (\r\n        <SuperButton key={i}\r\n                onClick={(e) => nextCard(i + 1)}>{el}</SuperButton>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            <h5>QUESTION</h5>\r\n            <span>{card.question}</span>\r\n            <p>ID карты: {card._id}</p>\r\n            <div>\r\n                {\r\n                    !checked && <SuperButton onClick={(e) => setIsChecked(true)}>CHECK</SuperButton>\r\n                }\r\n            </div>\r\n            <div>\r\n                {\r\n                    checked && (\r\n                        <div>\r\n                            <hr/>\r\n                            <p>Answer: {card.answer}</p>\r\n                            <p>Type: {card.type}</p>\r\n                            <p>Grade: {card.grade}</p>\r\n                            <div>\r\n                                {\r\n                                    mappedButton\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport s from './Error.module.css'\r\nimport {AppRootStateType} from \"../../01-redux/store\";\r\nimport {selectorError} from \"../../01-redux/selectors/app-selectors\";\r\nimport {setAppStatusAC} from \"../../01-redux/app-reducer\";\r\nimport {useState} from \"react\";\r\nimport {setLoginError} from \"../../01-redux/auth-reducer\";\r\n\r\ntype ErrorBarPropsType = {\r\n    errorMessage: string\r\n}\r\n\r\nconst ErrorSnackBar = (props: ErrorBarPropsType) => {\r\n    const error = useSelector<AppRootStateType, string | null>(selectorError)\r\n    const dispatch = useDispatch()\r\n    const onClickHandler = () => {\r\n        dispatch(setAppStatusAC('idle'))\r\n        dispatch(setLoginError(null))\r\n        console.log('error:error')\r\n    }\r\n    return (\r\n        <div className={error ? `${s.notification}` : `: ${s.closeNotification}`}>\r\n            <div className={s.text}> {props.errorMessage} </div>\r\n            <div className={`${s.close}`}>\r\n                <div className={s.text} onClick={onClickHandler}>X</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorSnackBar;","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CardType, fetchCardsTC, setCardGradeTC} from \"../../01-redux/cards-reducer\";\r\nimport {AppRootStateType} from \"../../01-redux/store\";\r\nimport {getRandomCard} from \"../../05-utils/u1-error/u2-getRandomCard/getRandomCard\";\r\nimport style from './LearnPage.module.css';\r\nimport {LearnCard} from \"./LearnCard/LearnCard\";\r\nimport ErrorSnackBar from \"../../03-Components/c7-ErrorSnackBar/ErrorSnackBar\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nconst grades = [\"Didn't know\", 'Forgot', 'Confused', 'A lot of thought', 'Knew'];\r\n\r\nexport const LearningPage: React.FC = React.memo(() => {\r\n        const error = useSelector<AppRootStateType, string | null>(state => state.app.status)\r\n        const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards);\r\n        const [isChecked, setIsChecked] = useState<boolean>(false);\r\n        const [first, setFirst] = useState<boolean>(true);\r\n        const {id} = useParams<{ id: string }>();\r\n        const dispatch = useDispatch();\r\n\r\n        useEffect(() => {\r\n            if (first) {\r\n                dispatch(fetchCardsTC(id))\r\n                setFirst(false)\r\n            }\r\n            if (cards.length > 0) {\r\n                setCard(getRandomCard(cards))\r\n                return () => {\r\n                    console.log('Learning Page clear effect ')\r\n                }\r\n            } else {\r\n\r\n            }\r\n        }, [cards, dispatch])\r\n\r\n\r\n        const [card, setCard] = useState<CardType>({\r\n            _id: 'fake',\r\n            cardsPack_id: '',\r\n            answer: 'answer fake',\r\n            question: 'question fake',\r\n            grade: 0,\r\n            shots: 0,\r\n            type: '',\r\n            rating: 0,\r\n            user_id: '',\r\n            __v: 0,\r\n            created: '',\r\n            updated: '',\r\n        });\r\n\r\n        useEffect(() => {\r\n            if (first) {\r\n                dispatch(fetchCardsTC(card.cardsPack_id));\r\n                setFirst(false);\r\n            }\r\n            if (cards && cards.length > 0) setCard(getRandomCard(cards));\r\n            return () => {\r\n            }\r\n        }, [dispatch, cards, first]);\r\n\r\n        const onNext = useCallback((grade: number) => {\r\n            setIsChecked(false);\r\n            if (cards.length > 0) {\r\n                if (!card._id) {\r\n                    console.log('error in useCallback')\r\n                }\r\n                dispatch(setCardGradeTC(grade, card._id))\r\n                setCard(getRandomCard(cards))\r\n            } else {\r\n                alert(`Something bad 'onNextCard'`)\r\n            }\r\n        }, [cards, card])\r\n\r\n\r\n        return (\r\n            <div className={style.pageContainer}>\r\n                {cards.length > 0 && <LearnCard card={card}\r\n                                                grades={grades}\r\n                                                checked={isChecked}\r\n                                                setIsChecked={setIsChecked}\r\n                                                onNextCard={onNext}/>\r\n                }\r\n                {error && <ErrorSnackBar errorMessage={error}/>}\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","import React from \"react\";\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\nimport styles from './Routes.module.css'\r\nimport Error404 from \"./Header/error404/Error404\";\r\nimport LoginContainer from \"../02-Features/auth/login/LoginContainer\";\r\nimport RegistrationContainer from \"../02-Features/auth/registration/RegistrationContainer\";\r\nimport Profile from \"../02-Features/profile/Profile\";\r\nimport RecoveryPassword from \"../02-Features/recovery-password/recoveryPassword\";\r\nimport {Cards} from \"../02-Features/cards/Cards\";\r\nimport Test from \"../02-Features/test/Test\";\r\nimport {ResetPassword} from \"../02-Features/reset-password/ResetPassword\";\r\nimport {Packs} from \"../02-Features/packs/Packs\";\r\nimport {LearningPage} from \"../02-Features/learning/LearnPage\";\r\n\r\nexport const PATH = {\r\n    LOGIN: \"/login\",\r\n    REGISTRATION: \"/registration\",\r\n    PROFILE: \"/profile\",\r\n    RESET_PASSWORD: \"/reset-password\",\r\n    NEW_PASSWORD: \"/recovery-password\",\r\n    TEST: \"/test\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n    LEARNING: \"/learning\",\r\n    MODALS: \"/modals\"\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div className={styles.mainContainer}>\r\n            <Switch>\r\n\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n\r\n                <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <RegistrationContainer/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.RESET_PASSWORD} render={() => <ResetPassword/>}/>\r\n                <Route path={PATH.NEW_PASSWORD} render={() => <RecoveryPassword/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={`${PATH.CARDS}/:id`}  render={() => <Cards />}/>\r\n\r\n                <Route path={PATH.LEARNING + '/:id'} exact render={() => <LearningPage/>}/>\r\n\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n{/*\r\n                <Route path={PATH.MODALS} render={() => <ModalsPage />}/>\r\n*/}\r\n\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Routes;\r\n","export default __webpack_public_path__ + \"static/media/Study Point._free-file.2aeaf9f9.png\";","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './AuthorizedNav.module.css';\r\nimport {PATH} from \"../../Routes\";\r\nimport logo from \"../../../04-Assets/Study Point._free-file.png\";\r\n\r\ntype NoAuthorizedNav = {\r\n    burgerNav?: boolean\r\n}\r\n\r\nexport const NoAuthorizedNav = (props: NoAuthorizedNav) => {\r\n\r\n//nya-admin@nya.nya1qazxcvBG\r\n    return (\r\n        <div className={props.burgerNav ? s.burgerContainer : s.noAuthNav}>\r\n            <img className={logo} src={logo}/>\r\n            <span>\r\n                    <NavLink to={PATH.LOGIN}\r\n                             className={s.menuItem}\r\n                             activeClassName={s.highlight}>Login</NavLink>\r\n           </span>\r\n            <span>\r\n                    <NavLink\r\n                        to={PATH.REGISTRATION}\r\n                        className={s.menuItem}\r\n                        activeClassName={s.highlight}>Registration</NavLink>\r\n            </span>\r\n            <span>\r\n                    <NavLink\r\n                        to={PATH.RESET_PASSWORD}\r\n                        className={s.menuItem}\r\n                        activeClassName={s.highlight}>Reset</NavLink>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../01-redux/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../03-Components/Routes\";\r\nimport SuperButton from \"../../../03-Components/c2-SuperButton/SuperButton\";\r\nimport {selectorIsLoggedIn} from \"../../../01-redux/selectors/auth-selector\";\r\nimport {logOutTC} from \"../../../01-redux/auth-reducer\";\r\n\r\nexport const Logout = () => {\r\n    const isLogin = useSelector<AppRootStateType, boolean>(selectorIsLoggedIn)\r\n    let dispatch = useDispatch()\r\n    const onClickHandler = () => {\r\n        dispatch(logOutTC())\r\n\r\n    }\r\n    if (!isLogin) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n    return (\r\n        <div>\r\n                <span> < SuperButton onClick={onClickHandler} name=\"Logout\">\r\n                    LOGOUT\r\n                </SuperButton> </span>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './AuthorizedNav.module.css';\r\nimport {PATH} from \"../../Routes\";\r\nimport logo from \"../../../04-Assets/Study Point._free-file.png\";\r\nimport {Logout} from \"../../../02-Features/auth/logaut/Logout\";\r\n\r\ntype AuthorizedNav = {\r\n    burgerNav?: boolean\r\n}\r\n\r\nexport const AuthorizedNav = (props: AuthorizedNav) => {\r\n\r\n//nya-admin@nya.nya1qazxcvBG\r\n    return (\r\n        <div className={props.burgerNav ? s.burgerContainer : s.navContainer}>\r\n            <img src={logo}/>\r\n            <span>\r\n                    <NavLink\r\n                        to={PATH.PROFILE}\r\n                        className={s.menuItem}\r\n                        activeClassName={s.highlight}>Profile</NavLink>\r\n                </span>\r\n\r\n            <span>\r\n                    <NavLink\r\n                        to={PATH.PACKS}\r\n                        className={s.menuItem}\r\n                        activeClassName={s.highlight}>Packs</NavLink>\r\n                </span>\r\n            <span>\r\n                    <NavLink\r\n                        to={PATH.NEW_PASSWORD}\r\n                        className={s.menuItem}\r\n                        activeClassName={s.highlight}>New Password</NavLink>\r\n                </span>\r\n            <span className={s.item}><Logout/></span>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport s from './Navbar.module.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../01-redux/store\";\r\nimport {NoAuthorizedNav} from \"../AuthorizedNav/NoAuthorizedNav\";\r\nimport {AuthorizedNav} from \"../AuthorizedNav/AuthorizedNav\";\r\nimport {logOutTC} from \"../../../01-redux/auth-reducer\";\r\n\r\nexport const Navbar = () => {\r\n\r\n//nya-admin@nya.nya1qazxcvBG\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    /*\r\n        const UserName = useSelector<AppRootStateType, string | null>(state => state.login ? state.app.UserData.name : null)\r\n    */\r\n    const logoutOnClick = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n    return (\r\n\r\n        <div className={s.navbar}>\r\n\r\n            {!isLoggedIn && <NoAuthorizedNav/>}\r\n            {isLoggedIn && <> <AuthorizedNav/>\r\n\r\n\r\n                {/*\r\n                <span className={s.userName}> {UserName} </span>\r\n*/}\r\n            </>}\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../01-redux/store\";\r\nimport s from './BurgerNav.module.css';\r\nimport SuperButton from \"../../c2-SuperButton/SuperButton\";\r\nimport {NoAuthorizedNav} from \"../AuthorizedNav/NoAuthorizedNav\";\r\nimport {AuthorizedNav} from \"../AuthorizedNav/AuthorizedNav\";\r\nimport {logOutTC} from \"../../../01-redux/auth-reducer\";\r\n\r\nexport const BurgerNav = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const logoutOnClick = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n    let [menuIsOpen, setMenuIsOpen] = useState(false)\r\n\r\n    return (<div className={s.burgerNav}>\r\n            {menuIsOpen && <div className={s.nav}>\r\n                {!isLoggedIn && <NoAuthorizedNav burgerNav={true}/>}\r\n                {isLoggedIn && <AuthorizedNav burgerNav={true}/>}\r\n            </div>}\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport classes from './Header.module.css'\r\nimport {Navbar} from \"./Navbar/Navbar\";\r\nimport {BurgerNav} from \"./BurgerNav/BurgerNav\";\r\nimport {Logout} from \"../../02-Features/auth/logaut/Logout\";\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className={classes.navbarContainer}>\r\n            <Navbar/>\r\n            <BurgerNav/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React, {useEffect} from 'react';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from \"./Header/Header\";\r\nimport Routes from './Routes';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../01-redux/store\";\r\nimport {selectorError, selectorStatus} from \"../01-redux/selectors/app-selectors\";\r\nimport {CircularProgress, LinearProgress} from \"@material-ui/core\";\r\nimport ErrorSnackBar from './c7-ErrorSnackBar/ErrorSnackBar';\r\nimport {initializedAppTC} from \"../01-redux/app-reducer\";\r\nimport Error from \"../05-utils/u1-error/Error\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const appStatus = useSelector<AppRootStateType, string>(selectorStatus)\r\n    const error = useSelector<AppRootStateType, string | null>(selectorError)\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <CircularProgress/>\r\n    }\r\n    return (\r\n        <div>\r\n            <HashRouter>\r\n                <Header/>\r\n                {appStatus === 'loading' ? <LinearProgress color=\"primary\"/> : null}\r\n                <Routes/>\r\n                {error && <ErrorSnackBar errorMessage={error}/>}\r\n            </HashRouter>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./01-redux/store\";\r\nimport App from \"./03-Components/App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__1Of2e\",\"modalActive\":\"Modal_modalActive__3I3NU\",\"modalContent\":\"Modal_modalContent__3Sjij\",\"btn\":\"Modal_btn__BKPRb\",\"modalContentActive\":\"Modal_modalContentActive__1XAgF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"Login_formContainer__27Xxj\",\"error\":\"Login_error__VXPbQ\",\"text\":\"Login_text__3zFat\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Error_notification__M6Xt0\",\"closeNotification\":\"Error_closeNotification__2etY7\",\"text\":\"Error_text__2kYpe\",\"close\":\"Error_close__1lLU4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__1FKid\",\"superInput\":\"SuperInputText_superInput__2hfVg\",\"errorInput\":\"SuperInputText_errorInput__2wYmy\",\"error\":\"SuperInputText_error__7x9fy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"packsContainer\":\"Packs_packsContainer__1qqoz\",\"cards\":\"Packs_cards__26gss\",\"table\":\"Packs_table__1ZkHE\",\"filtersContainer\":\"Packs_filtersContainer__3rq2f\",\"tableHeaders\":\"Packs_tableHeaders__2Ndcb\",\"addButton\":\"Packs_addButton__1zN61\",\"dataForm\":\"Packs_dataForm__2OgZA\",\"search\":\"Packs_search__3UGCp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inactive\":\"CardPacksElement_inactive__3U5vA\",\"active\":\"CardPacksElement_active__4PiO7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageContainer\":\"Error404_messageContainer__sBVQy\",\"mainImage\":\"Error404_mainImage__2Hrt_\",\"errorText\":\"Error404_errorText__etA9o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonStyle\":\"SuperButton_buttonStyle__2k8-s\",\"default\":\"SuperButton_default__3-b5U\",\"red\":\"SuperButton_red__1GGt0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Profile_container__WANwi\",\"dataUser\":\"Profile_dataUser__2a4E_\",\"avatar\":\"Profile_avatar__2nnwB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsPage\":\"Cards_cardsPage__19L5J\",\"search\":\"Cards_search__MreLh\",\"cardsBlock\":\"Cards_cardsBlock__19MCl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumber\":\"Paginator_pageNumber__TLCE9\",\"currentPage\":\"Paginator_currentPage__3LI_I\",\"paginationContainer\":\"Paginator_paginationContainer__1-1IH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__bHHmj\",\"spanClassName\":\"SuperCheckbox_spanClassName__1bsoN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"Registration_formContainer__hpYaE\",\"error\":\"Registration_error__2eumI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1zGWf\",\"button\":\"Card_button__1iw7e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"BurgerNav_nav__2j5Az\",\"positionBtn\":\"BurgerNav_positionBtn__3e7O3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbarContainer\":\"Header_navbarContainer__GVZcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hidden\":\"Navbar_hidden__1MVvI\",\"navbar\":\"Navbar_navbar__2STVv\",\"highlight\":\"Navbar_highlight__y63Jy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Routes_mainContainer__1556y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Test_container__2UtTC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchContainer\":\"Search_searchContainer__31-PR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageContainer\":\"LearnPage_pageContainer__2sYQO\"};"],"sourceRoot":""}